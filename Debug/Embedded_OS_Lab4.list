
Embedded_OS_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004710  08004710  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004718  08004718  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001698  20000078  08004798  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001710  08004798  00021710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010db4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002458  00000000  00000000  00030e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  000332b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228c4  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bfbe  00000000  00000000  000576f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0135  00000000  00000000  000636b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001337e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  00133864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800452c 	.word	0x0800452c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800452c 	.word	0x0800452c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fae1 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f85b 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8e1 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8b5 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(RedLEDTask,"RedLEDTask",100,NULL,0,NULL);
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2300      	movs	r3, #0
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2264      	movs	r2, #100	; 0x64
 80005a2:	491c      	ldr	r1, [pc, #112]	; (8000614 <main+0x94>)
 80005a4:	481c      	ldr	r0, [pc, #112]	; (8000618 <main+0x98>)
 80005a6:	f002 f9cf 	bl	8002948 <xTaskCreate>
  xTaskCreate(Task1,"Task1",50,NULL,0,NULL);
 80005aa:	2300      	movs	r3, #0
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2232      	movs	r2, #50	; 0x32
 80005b6:	4919      	ldr	r1, [pc, #100]	; (800061c <main+0x9c>)
 80005b8:	4819      	ldr	r0, [pc, #100]	; (8000620 <main+0xa0>)
 80005ba:	f002 f9c5 	bl	8002948 <xTaskCreate>
  xTaskCreate(Task2,"Task2",30,NULL,0,NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2300      	movs	r3, #0
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	221e      	movs	r2, #30
 80005ca:	4916      	ldr	r1, [pc, #88]	; (8000624 <main+0xa4>)
 80005cc:	4816      	ldr	r0, [pc, #88]	; (8000628 <main+0xa8>)
 80005ce:	f002 f9bb 	bl	8002948 <xTaskCreate>
  xTaskCreate(GreenLEDTask,"GreenLEDTask",130,NULL,0,NULL);
 80005d2:	2300      	movs	r3, #0
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2300      	movs	r3, #0
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	2282      	movs	r2, #130	; 0x82
 80005de:	4913      	ldr	r1, [pc, #76]	; (800062c <main+0xac>)
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <main+0xb0>)
 80005e2:	f002 f9b1 	bl	8002948 <xTaskCreate>
  xTaskCreate(Task3,"Task3",40,NULL,0,NULL);
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2300      	movs	r3, #0
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2228      	movs	r2, #40	; 0x28
 80005f2:	4910      	ldr	r1, [pc, #64]	; (8000634 <main+0xb4>)
 80005f4:	4810      	ldr	r0, [pc, #64]	; (8000638 <main+0xb8>)
 80005f6:	f002 f9a7 	bl	8002948 <xTaskCreate>
  xTaskCreate(PrintTask,"PrintTask",130,NULL,0,NULL);
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2282      	movs	r2, #130	; 0x82
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <main+0xbc>)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <main+0xc0>)
 800060a:	f002 f99d 	bl	8002948 <xTaskCreate>
  vTaskStartScheduler();
 800060e:	f002 fbc1 	bl	8002d94 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x92>
 8000614:	08004544 	.word	0x08004544
 8000618:	080007dd 	.word	0x080007dd
 800061c:	08004550 	.word	0x08004550
 8000620:	0800081d 	.word	0x0800081d
 8000624:	08004558 	.word	0x08004558
 8000628:	0800082d 	.word	0x0800082d
 800062c:	08004560 	.word	0x08004560
 8000630:	080007fd 	.word	0x080007fd
 8000634:	08004570 	.word	0x08004570
 8000638:	0800083d 	.word	0x0800083d
 800063c:	08004578 	.word	0x08004578
 8000640:	0800084d 	.word	0x0800084d

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fb5d 	bl	8003d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xb4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xb4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xb4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <SystemClock_Config+0xb8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <SystemClock_Config+0xb8>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <SystemClock_Config+0xb8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fd3b 	bl	8001130 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c0:	f000 f8e2 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ff96 	bl	8001610 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ea:	f000 f8cd 	bl	8000888 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 fba6 	bl	8001e88 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f8a1 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20001688 	.word	0x20001688
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_GPIO_Init+0x80>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <MX_GPIO_Init+0x80>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_GPIO_Init+0x80>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_GPIO_Init+0x80>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x80>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_GPIO_Init+0x80>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0x84>)
 80007aa:	f000 fc8d 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80007ae:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_GPIO_Init+0x84>)
 80007c8:	f000 fae4 	bl	8000d94 <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020c00 	.word	0x40020c00

080007dc <RedLEDTask>:

/* USER CODE BEGIN 4 */
void RedLEDTask(void const * argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <RedLEDTask+0x1c>)
 80007ea:	f000 fc86 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 80007ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f2:	f002 fa9b 	bl	8002d2c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007f6:	e7f5      	b.n	80007e4 <RedLEDTask+0x8>
 80007f8:	40020c00 	.word	0x40020c00

080007fc <GreenLEDTask>:
	}
}
void GreenLEDTask(void const * argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <GreenLEDTask+0x1c>)
 800080a:	f000 fc76 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 800080e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000812:	f002 fa8b 	bl	8002d2c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000816:	e7f5      	b.n	8000804 <GreenLEDTask+0x8>
 8000818:	40020c00 	.word	0x40020c00

0800081c <Task1>:
	}
}
void Task1(void const * argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 8000824:	2000      	movs	r0, #0
 8000826:	f002 f9f3 	bl	8002c10 <vTaskDelete>
 800082a:	e7fb      	b.n	8000824 <Task1+0x8>

0800082c <Task2>:
	}
}
void Task2(void const * argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 8000834:	2000      	movs	r0, #0
 8000836:	f002 f9eb 	bl	8002c10 <vTaskDelete>
 800083a:	e7fb      	b.n	8000834 <Task2+0x8>

0800083c <Task3>:
	}
}

void Task3(void const * argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 8000844:	2000      	movs	r0, #0
 8000846:	f002 f9e3 	bl	8002c10 <vTaskDelete>
 800084a:	e7fb      	b.n	8000844 <Task3+0x8>

0800084c <PrintTask>:
	}
}
void PrintTask(void const * argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vPrintFreeList();
 8000854:	f003 f9b8 	bl	8003bc8 <vPrintFreeList>
		vTaskDelay(3000);
 8000858:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800085c:	f002 fa66 	bl	8002d2c <vTaskDelay>
		vPrintFreeList();
 8000860:	e7f8      	b.n	8000854 <PrintTask+0x8>
	...

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f000 f98b 	bl	8000b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40001400 	.word	0x40001400

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088e:	e7fe      	b.n	800088e <Error_Handler+0x6>

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_UART_MspInit+0x84>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12b      	bne.n	800095a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x88>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800093a:	230c      	movs	r3, #12
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094a:	2307      	movs	r3, #7
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x8c>)
 8000956:	f000 fa1d 	bl	8000d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000

08000970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	2037      	movs	r0, #55	; 0x37
 8000986:	f000 f9db 	bl	8000d40 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800098a:	2037      	movs	r0, #55	; 0x37
 800098c:	f000 f9f4 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <HAL_InitTick+0xa0>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <HAL_InitTick+0xa0>)
 800099a:	f043 0320 	orr.w	r3, r3, #32
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_InitTick+0xa0>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 0320 	and.w	r3, r3, #32
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ac:	f107 0210 	add.w	r2, r7, #16
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fff6 	bl	80019a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009bc:	f000 ffcc 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 80009c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <HAL_InitTick+0xa4>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	0c9b      	lsrs	r3, r3, #18
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_InitTick+0xa8>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <HAL_InitTick+0xac>)
 80009d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_InitTick+0xa8>)
 80009d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009dc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_InitTick+0xa8>)
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_InitTick+0xa8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_InitTick+0xa8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_InitTick+0xa8>)
 80009f2:	f001 f80b 	bl	8001a0c <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d104      	bne.n	8000a06 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <HAL_InitTick+0xa8>)
 80009fe:	f001 f83a 	bl	8001a76 <HAL_TIM_Base_Start_IT>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3730      	adds	r7, #48	; 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	200016c8 	.word	0x200016c8
 8000a1c:	40001400 	.word	0x40001400

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM7_IRQHandler+0x10>)
 8000a52:	f001 f834 	bl	8001abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200016c8 	.word	0x200016c8

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f003 f90a 	bl	8003ca8 <__errno>
 8000a94:	4602      	mov	r2, r0
 8000a96:	230c      	movs	r3, #12
 8000a98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20020000 	.word	0x20020000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	20000094 	.word	0x20000094
 8000ac8:	20001710 	.word	0x20001710

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <SystemInit+0x28>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <SystemInit+0x28>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SystemInit+0x28>)
 8000ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
  ldr  r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b22:	f7ff ffd3 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f003 f8c5 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd29 	bl	8000580 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b34:	08004720 	.word	0x08004720
  ldr  r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b3c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000b40:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000b44:	20001710 	.word	0x20001710

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f8d8 	bl	8000d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fef8 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe86 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20001708 	.word	0x20001708

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20001708 	.word	0x20001708

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff4c 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d52:	f7ff ff61 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff ffb1 	bl	8000cc4 <NVIC_EncodePriority>
 8000d62:	4602      	mov	r2, r0
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff80 	bl	8000c70 <__NVIC_SetPriority>
}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff54 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e16b      	b.n	8001088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 815a 	bne.w	8001082 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d00b      	beq.n	8000dee <HAL_GPIO_Init+0x5a>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de2:	2b11      	cmp	r3, #17
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b12      	cmp	r3, #18
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0xfc>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d123      	bne.n	8000ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	69b9      	ldr	r1, [r7, #24]
 8000ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0203 	and.w	r2, r3, #3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80b4 	beq.w	8001082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	; (800109c <HAL_GPIO_Init+0x308>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a5e      	ldr	r2, [pc, #376]	; (800109c <HAL_GPIO_Init+0x308>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <HAL_GPIO_Init+0x308>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f36:	4a5a      	ldr	r2, [pc, #360]	; (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a51      	ldr	r2, [pc, #324]	; (80010a4 <HAL_GPIO_Init+0x310>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x226>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a50      	ldr	r2, [pc, #320]	; (80010a8 <HAL_GPIO_Init+0x314>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x222>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <HAL_GPIO_Init+0x318>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x21e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4e      	ldr	r2, [pc, #312]	; (80010b0 <HAL_GPIO_Init+0x31c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4d      	ldr	r2, [pc, #308]	; (80010b4 <HAL_GPIO_Init+0x320>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x324>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4b      	ldr	r2, [pc, #300]	; (80010bc <HAL_GPIO_Init+0x328>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <HAL_GPIO_Init+0x32c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x20a>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e00e      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4934      	ldr	r1, [pc, #208]	; (80010a0 <HAL_GPIO_Init+0x30c>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_GPIO_Init+0x330>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_GPIO_Init+0x330>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x330>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x330>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_GPIO_Init+0x330>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_GPIO_Init+0x330>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x330>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_GPIO_Init+0x330>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae90 	bls.w	8000db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	3724      	adds	r7, #36	; 0x24
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40021400 	.word	0x40021400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40021c00 	.word	0x40021c00
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	401a      	ands	r2, r3
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	429a      	cmp	r2, r3
 8001112:	d104      	bne.n	800111e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	041a      	lsls	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800111c:	e002      	b.n	8001124 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e25b      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d075      	beq.n	800123a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800114e:	4ba3      	ldr	r3, [pc, #652]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b04      	cmp	r3, #4
 8001158:	d00c      	beq.n	8001174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4ba0      	ldr	r3, [pc, #640]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001162:	2b08      	cmp	r3, #8
 8001164:	d112      	bne.n	800118c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001166:	4b9d      	ldr	r3, [pc, #628]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001172:	d10b      	bne.n	800118c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	4b99      	ldr	r3, [pc, #612]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d05b      	beq.n	8001238 <HAL_RCC_OscConfig+0x108>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d157      	bne.n	8001238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e236      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d106      	bne.n	80011a4 <HAL_RCC_OscConfig+0x74>
 8001196:	4b91      	ldr	r3, [pc, #580]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a90      	ldr	r2, [pc, #576]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0xb0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x98>
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a8a      	ldr	r2, [pc, #552]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b88      	ldr	r3, [pc, #544]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a87      	ldr	r2, [pc, #540]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0xb0>
 80011c8:	4b84      	ldr	r3, [pc, #528]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a83      	ldr	r2, [pc, #524]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b81      	ldr	r3, [pc, #516]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a80      	ldr	r2, [pc, #512]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fce6 	bl	8000bb8 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fce2 	bl	8000bb8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e1fb      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b76      	ldr	r3, [pc, #472]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xc0>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fcd2 	bl	8000bb8 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcce 	bl	8000bb8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e1e7      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	4b6c      	ldr	r3, [pc, #432]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0xe8>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d063      	beq.n	800130e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b62      	ldr	r3, [pc, #392]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800125a:	2b08      	cmp	r3, #8
 800125c:	d11c      	bne.n	8001298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125e:	4b5f      	ldr	r3, [pc, #380]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d116      	bne.n	8001298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_RCC_OscConfig+0x152>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e1bb      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b56      	ldr	r3, [pc, #344]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4952      	ldr	r1, [pc, #328]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	e03a      	b.n	800130e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a0:	4b4f      	ldr	r3, [pc, #316]	; (80013e0 <HAL_RCC_OscConfig+0x2b0>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fc87 	bl	8000bb8 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc83 	bl	8000bb8 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e19c      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b43      	ldr	r3, [pc, #268]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4940      	ldr	r1, [pc, #256]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_RCC_OscConfig+0x2b0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc66 	bl	8000bb8 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc62 	bl	8000bb8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e17b      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d030      	beq.n	800137c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d016      	beq.n	8001350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_RCC_OscConfig+0x2b4>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001328:	f7ff fc46 	bl	8000bb8 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fc42 	bl	8000bb8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e15b      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x200>
 800134e:	e015      	b.n	800137c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x2b4>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fc2f 	bl	8000bb8 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135e:	f7ff fc2b 	bl	8000bb8 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e144      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a0 	beq.w	80014ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x2b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d121      	bne.n	800140a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_RCC_OscConfig+0x2b8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_RCC_OscConfig+0x2b8>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fbf1 	bl	8000bb8 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e011      	b.n	80013fe <HAL_RCC_OscConfig+0x2ce>
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	42470000 	.word	0x42470000
 80013e4:	42470e80 	.word	0x42470e80
 80013e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ec:	f7ff fbe4 	bl	8000bb8 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e0fd      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <HAL_RCC_OscConfig+0x4d4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x2f0>
 8001412:	4b7d      	ldr	r3, [pc, #500]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a7c      	ldr	r2, [pc, #496]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
 800141e:	e01c      	b.n	800145a <HAL_RCC_OscConfig+0x32a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d10c      	bne.n	8001442 <HAL_RCC_OscConfig+0x312>
 8001428:	4b77      	ldr	r3, [pc, #476]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a76      	ldr	r2, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
 8001434:	4b74      	ldr	r3, [pc, #464]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001438:	4a73      	ldr	r2, [pc, #460]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	; 0x70
 8001440:	e00b      	b.n	800145a <HAL_RCC_OscConfig+0x32a>
 8001442:	4b71      	ldr	r3, [pc, #452]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a70      	ldr	r2, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	4b6e      	ldr	r3, [pc, #440]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d015      	beq.n	800148e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001462:	f7ff fba9 	bl	8000bb8 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fba5 	bl	8000bb8 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e0bc      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	4b61      	ldr	r3, [pc, #388]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0ee      	beq.n	800146a <HAL_RCC_OscConfig+0x33a>
 800148c:	e014      	b.n	80014b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb93 	bl	8000bb8 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff fb8f 	bl	8000bb8 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0a6      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	4b56      	ldr	r3, [pc, #344]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ee      	bne.n	8001496 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d105      	bne.n	80014ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014be:	4b52      	ldr	r3, [pc, #328]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a51      	ldr	r2, [pc, #324]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 80014c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8092 	beq.w	80015f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d4:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d05c      	beq.n	800159a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d141      	bne.n	800156c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b48      	ldr	r3, [pc, #288]	; (800160c <HAL_RCC_OscConfig+0x4dc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fb63 	bl	8000bb8 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f6:	f7ff fb5f 	bl	8000bb8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e078      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69da      	ldr	r2, [r3, #28]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	019b      	lsls	r3, r3, #6
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	061b      	lsls	r3, r3, #24
 8001538:	4933      	ldr	r1, [pc, #204]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x4dc>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb38 	bl	8000bb8 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fb34 	bl	8000bb8 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e04d      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x41c>
 800156a:	e045      	b.n	80015f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_RCC_OscConfig+0x4dc>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fb21 	bl	8000bb8 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff fb1d 	bl	8000bb8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e036      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x44a>
 8001598:	e02e      	b.n	80015f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e029      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d115      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ce:	4013      	ands	r3, r2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40007000 	.word	0x40007000
 8001608:	40023800 	.word	0x40023800
 800160c:	42470060 	.word	0x42470060

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0cc      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d90c      	bls.n	800164c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0b8      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001664:	4b59      	ldr	r3, [pc, #356]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800166e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b50      	ldr	r3, [pc, #320]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	494d      	ldr	r1, [pc, #308]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d044      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e07f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e067      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4934      	ldr	r1, [pc, #208]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff fa5a 	bl	8000bb8 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff fa56 	bl	8000bb8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e04f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20c      	bcs.n	8001758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e032      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4916      	ldr	r1, [pc, #88]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	490e      	ldr	r1, [pc, #56]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001796:	f000 f821 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 800179a:	4601      	mov	r1, r0
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	fa21 f303 	lsr.w	r3, r1, r3
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f8da 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	080046c4 	.word	0x080046c4
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f2:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_GetSysClockFreq+0x158>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d007      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x32>
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d008      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x38>
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 808d 	bne.w	8001922 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_GetSysClockFreq+0x15c>)
 800180a:	60bb      	str	r3, [r7, #8]
       break;
 800180c:	e08c      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180e:	4b4b      	ldr	r3, [pc, #300]	; (800193c <HAL_RCC_GetSysClockFreq+0x160>)
 8001810:	60bb      	str	r3, [r7, #8]
      break;
 8001812:	e089      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001814:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_GetSysClockFreq+0x158>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181e:	4b45      	ldr	r3, [pc, #276]	; (8001934 <HAL_RCC_GetSysClockFreq+0x158>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d023      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <HAL_RCC_GetSysClockFreq+0x158>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	f04f 0400 	mov.w	r4, #0
 8001834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	ea03 0501 	and.w	r5, r3, r1
 8001840:	ea04 0602 	and.w	r6, r4, r2
 8001844:	4a3d      	ldr	r2, [pc, #244]	; (800193c <HAL_RCC_GetSysClockFreq+0x160>)
 8001846:	fb02 f106 	mul.w	r1, r2, r6
 800184a:	2200      	movs	r2, #0
 800184c:	fb02 f205 	mul.w	r2, r2, r5
 8001850:	440a      	add	r2, r1
 8001852:	493a      	ldr	r1, [pc, #232]	; (800193c <HAL_RCC_GetSysClockFreq+0x160>)
 8001854:	fba5 0101 	umull	r0, r1, r5, r1
 8001858:	1853      	adds	r3, r2, r1
 800185a:	4619      	mov	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f04f 0400 	mov.w	r4, #0
 8001862:	461a      	mov	r2, r3
 8001864:	4623      	mov	r3, r4
 8001866:	f7fe fd0b 	bl	8000280 <__aeabi_uldivmod>
 800186a:	4603      	mov	r3, r0
 800186c:	460c      	mov	r4, r1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e049      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_RCC_GetSysClockFreq+0x158>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	ea03 0501 	and.w	r5, r3, r1
 8001888:	ea04 0602 	and.w	r6, r4, r2
 800188c:	4629      	mov	r1, r5
 800188e:	4632      	mov	r2, r6
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f04f 0400 	mov.w	r4, #0
 8001898:	0154      	lsls	r4, r2, #5
 800189a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800189e:	014b      	lsls	r3, r1, #5
 80018a0:	4619      	mov	r1, r3
 80018a2:	4622      	mov	r2, r4
 80018a4:	1b49      	subs	r1, r1, r5
 80018a6:	eb62 0206 	sbc.w	r2, r2, r6
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	0194      	lsls	r4, r2, #6
 80018b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018b8:	018b      	lsls	r3, r1, #6
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	eb64 0402 	sbc.w	r4, r4, r2
 80018c0:	f04f 0100 	mov.w	r1, #0
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	00e2      	lsls	r2, r4, #3
 80018ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ce:	00d9      	lsls	r1, r3, #3
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	195b      	adds	r3, r3, r5
 80018d6:	eb44 0406 	adc.w	r4, r4, r6
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	02a2      	lsls	r2, r4, #10
 80018e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018e8:	0299      	lsls	r1, r3, #10
 80018ea:	460b      	mov	r3, r1
 80018ec:	4614      	mov	r4, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	4621      	mov	r1, r4
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f04f 0400 	mov.w	r4, #0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	f7fe fcc0 	bl	8000280 <__aeabi_uldivmod>
 8001900:	4603      	mov	r3, r0
 8001902:	460c      	mov	r4, r1
 8001904:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_GetSysClockFreq+0x158>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	3301      	adds	r3, #1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	60bb      	str	r3, [r7, #8]
      break;
 8001920:	e002      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001924:	60bb      	str	r3, [r7, #8]
      break;
 8001926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001928:	68bb      	ldr	r3, [r7, #8]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	00f42400 	.word	0x00f42400
 800193c:	017d7840 	.word	0x017d7840

08001940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_GetHCLKFreq+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800195c:	f7ff fff0 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001960:	4601      	mov	r1, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_RCC_GetPCLK1Freq+0x24>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	080046d4 	.word	0x080046d4

08001980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001984:	f7ff ffdc 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001988:	4601      	mov	r1, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0b5b      	lsrs	r3, r3, #13
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	080046d4 	.word	0x080046d4

080019a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	220f      	movs	r2, #15
 80019b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	08db      	lsrs	r3, r3, #3
 80019e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_RCC_GetClockConfig+0x60>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 020f 	and.w	r2, r3, #15
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e01d      	b.n	8001a5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f815 	bl	8001a62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f000 f968 	bl	8001d20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d007      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d122      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d11b      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f06f 0202 	mvn.w	r2, #2
 8001aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8ee 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001b06:	e005      	b.n	8001b14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8e0 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8f1 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d122      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d11b      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0204 	mvn.w	r2, #4
 8001b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8c4 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001b5a:	e005      	b.n	8001b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8b6 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8c7 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d122      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11b      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f06f 0208 	mvn.w	r2, #8
 8001b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f89a 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001bae:	e005      	b.n	8001bbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f88c 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f89d 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d122      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d11b      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0210 	mvn.w	r2, #16
 8001be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2208      	movs	r2, #8
 8001bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f870 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001c02:	e005      	b.n	8001c10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f862 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f873 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10e      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0201 	mvn.w	r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7fe fe11 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d10e      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	2b80      	cmp	r3, #128	; 0x80
 8001c5c:	d107      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f903 	bl	8001e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b40      	cmp	r3, #64	; 0x40
 8001c7a:	d10e      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d107      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f838 	bl	8001d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d107      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0220 	mvn.w	r2, #32
 8001cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f8cd 	bl	8001e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a40      	ldr	r2, [pc, #256]	; (8001e34 <TIM_Base_SetConfig+0x114>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3e:	d00f      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3d      	ldr	r2, [pc, #244]	; (8001e38 <TIM_Base_SetConfig+0x118>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00b      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3c      	ldr	r2, [pc, #240]	; (8001e3c <TIM_Base_SetConfig+0x11c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3b      	ldr	r2, [pc, #236]	; (8001e40 <TIM_Base_SetConfig+0x120>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d003      	beq.n	8001d60 <TIM_Base_SetConfig+0x40>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3a      	ldr	r2, [pc, #232]	; (8001e44 <TIM_Base_SetConfig+0x124>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d108      	bne.n	8001d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <TIM_Base_SetConfig+0x114>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d80:	d027      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <TIM_Base_SetConfig+0x118>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d023      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	; (8001e3c <TIM_Base_SetConfig+0x11c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <TIM_Base_SetConfig+0x120>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <TIM_Base_SetConfig+0x124>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d017      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <TIM_Base_SetConfig+0x128>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <TIM_Base_SetConfig+0x12c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00f      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <TIM_Base_SetConfig+0x130>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00b      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <TIM_Base_SetConfig+0x134>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <TIM_Base_SetConfig+0x138>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <TIM_Base_SetConfig+0x13c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <TIM_Base_SetConfig+0x114>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0xf8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <TIM_Base_SetConfig+0x124>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d103      	bne.n	8001e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	615a      	str	r2, [r3, #20]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40000800 	.word	0x40000800
 8001e40:	40000c00 	.word	0x40000c00
 8001e44:	40010400 	.word	0x40010400
 8001e48:	40014000 	.word	0x40014000
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40014800 	.word	0x40014800
 8001e54:	40001800 	.word	0x40001800
 8001e58:	40001c00 	.word	0x40001c00
 8001e5c:	40002000 	.word	0x40002000

08001e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e03f      	b.n	8001f1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fd16 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f90b 	bl	80020e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b088      	sub	sp, #32
 8001f26:	af02      	add	r7, sp, #8
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	f040 8083 	bne.w	800204a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_UART_Transmit+0x2e>
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e07b      	b.n	800204c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Transmit+0x40>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e074      	b.n	800204c <HAL_UART_Transmit+0x12a>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2221      	movs	r2, #33	; 0x21
 8001f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fe1e 	bl	8000bb8 <HAL_GetTick>
 8001f7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f92:	e042      	b.n	800201a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001faa:	d122      	bne.n	8001ff2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2180      	movs	r1, #128	; 0x80
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f84c 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e042      	b.n	800204c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	e017      	b.n	800201a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	e013      	b.n	800201a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f829 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e01f      	b.n	800204c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1b7      	bne.n	8001f94 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	2140      	movs	r1, #64	; 0x40
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f810 	bl	8002054 <UART_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e006      	b.n	800204c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
  }
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002064:	e02c      	b.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800206c:	d028      	beq.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <UART_WaitOnFlagUntilTimeout+0x30>
 8002074:	f7fe fda0 	bl	8000bb8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	429a      	cmp	r2, r3
 8002082:	d21d      	bcs.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002092:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e00f      	b.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4013      	ands	r3, r2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d0c3      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800212a:	f023 030c 	bic.w	r3, r3, #12
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	68f9      	ldr	r1, [r7, #12]
 8002134:	430b      	orrs	r3, r1
 8002136:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002156:	f040 818b 	bne.w	8002470 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4ac1      	ldr	r2, [pc, #772]	; (8002464 <UART_SetConfig+0x37c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d005      	beq.n	8002170 <UART_SetConfig+0x88>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4abf      	ldr	r2, [pc, #764]	; (8002468 <UART_SetConfig+0x380>)
 800216a:	4293      	cmp	r3, r2
 800216c:	f040 80bd 	bne.w	80022ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002170:	f7ff fc06 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 8002174:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	461d      	mov	r5, r3
 800217a:	f04f 0600 	mov.w	r6, #0
 800217e:	46a8      	mov	r8, r5
 8002180:	46b1      	mov	r9, r6
 8002182:	eb18 0308 	adds.w	r3, r8, r8
 8002186:	eb49 0409 	adc.w	r4, r9, r9
 800218a:	4698      	mov	r8, r3
 800218c:	46a1      	mov	r9, r4
 800218e:	eb18 0805 	adds.w	r8, r8, r5
 8002192:	eb49 0906 	adc.w	r9, r9, r6
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021aa:	4688      	mov	r8, r1
 80021ac:	4691      	mov	r9, r2
 80021ae:	eb18 0005 	adds.w	r0, r8, r5
 80021b2:	eb49 0106 	adc.w	r1, r9, r6
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	461d      	mov	r5, r3
 80021bc:	f04f 0600 	mov.w	r6, #0
 80021c0:	196b      	adds	r3, r5, r5
 80021c2:	eb46 0406 	adc.w	r4, r6, r6
 80021c6:	461a      	mov	r2, r3
 80021c8:	4623      	mov	r3, r4
 80021ca:	f7fe f859 	bl	8000280 <__aeabi_uldivmod>
 80021ce:	4603      	mov	r3, r0
 80021d0:	460c      	mov	r4, r1
 80021d2:	461a      	mov	r2, r3
 80021d4:	4ba5      	ldr	r3, [pc, #660]	; (800246c <UART_SetConfig+0x384>)
 80021d6:	fba3 2302 	umull	r2, r3, r3, r2
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	461d      	mov	r5, r3
 80021e4:	f04f 0600 	mov.w	r6, #0
 80021e8:	46a9      	mov	r9, r5
 80021ea:	46b2      	mov	sl, r6
 80021ec:	eb19 0309 	adds.w	r3, r9, r9
 80021f0:	eb4a 040a 	adc.w	r4, sl, sl
 80021f4:	4699      	mov	r9, r3
 80021f6:	46a2      	mov	sl, r4
 80021f8:	eb19 0905 	adds.w	r9, r9, r5
 80021fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800220c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002210:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002214:	4689      	mov	r9, r1
 8002216:	4692      	mov	sl, r2
 8002218:	eb19 0005 	adds.w	r0, r9, r5
 800221c:	eb4a 0106 	adc.w	r1, sl, r6
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	461d      	mov	r5, r3
 8002226:	f04f 0600 	mov.w	r6, #0
 800222a:	196b      	adds	r3, r5, r5
 800222c:	eb46 0406 	adc.w	r4, r6, r6
 8002230:	461a      	mov	r2, r3
 8002232:	4623      	mov	r3, r4
 8002234:	f7fe f824 	bl	8000280 <__aeabi_uldivmod>
 8002238:	4603      	mov	r3, r0
 800223a:	460c      	mov	r4, r1
 800223c:	461a      	mov	r2, r3
 800223e:	4b8b      	ldr	r3, [pc, #556]	; (800246c <UART_SetConfig+0x384>)
 8002240:	fba3 1302 	umull	r1, r3, r3, r2
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	2164      	movs	r1, #100	; 0x64
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	3332      	adds	r3, #50	; 0x32
 8002252:	4a86      	ldr	r2, [pc, #536]	; (800246c <UART_SetConfig+0x384>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002260:	4498      	add	r8, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	461d      	mov	r5, r3
 8002266:	f04f 0600 	mov.w	r6, #0
 800226a:	46a9      	mov	r9, r5
 800226c:	46b2      	mov	sl, r6
 800226e:	eb19 0309 	adds.w	r3, r9, r9
 8002272:	eb4a 040a 	adc.w	r4, sl, sl
 8002276:	4699      	mov	r9, r3
 8002278:	46a2      	mov	sl, r4
 800227a:	eb19 0905 	adds.w	r9, r9, r5
 800227e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800228e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002296:	4689      	mov	r9, r1
 8002298:	4692      	mov	sl, r2
 800229a:	eb19 0005 	adds.w	r0, r9, r5
 800229e:	eb4a 0106 	adc.w	r1, sl, r6
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	461d      	mov	r5, r3
 80022a8:	f04f 0600 	mov.w	r6, #0
 80022ac:	196b      	adds	r3, r5, r5
 80022ae:	eb46 0406 	adc.w	r4, r6, r6
 80022b2:	461a      	mov	r2, r3
 80022b4:	4623      	mov	r3, r4
 80022b6:	f7fd ffe3 	bl	8000280 <__aeabi_uldivmod>
 80022ba:	4603      	mov	r3, r0
 80022bc:	460c      	mov	r4, r1
 80022be:	461a      	mov	r2, r3
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <UART_SetConfig+0x384>)
 80022c2:	fba3 1302 	umull	r1, r3, r3, r2
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2164      	movs	r1, #100	; 0x64
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	3332      	adds	r3, #50	; 0x32
 80022d4:	4a65      	ldr	r2, [pc, #404]	; (800246c <UART_SetConfig+0x384>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	f003 0207 	and.w	r2, r3, #7
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4442      	add	r2, r8
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e26f      	b.n	80027ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ea:	f7ff fb35 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 80022ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	461d      	mov	r5, r3
 80022f4:	f04f 0600 	mov.w	r6, #0
 80022f8:	46a8      	mov	r8, r5
 80022fa:	46b1      	mov	r9, r6
 80022fc:	eb18 0308 	adds.w	r3, r8, r8
 8002300:	eb49 0409 	adc.w	r4, r9, r9
 8002304:	4698      	mov	r8, r3
 8002306:	46a1      	mov	r9, r4
 8002308:	eb18 0805 	adds.w	r8, r8, r5
 800230c:	eb49 0906 	adc.w	r9, r9, r6
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800231c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002320:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002324:	4688      	mov	r8, r1
 8002326:	4691      	mov	r9, r2
 8002328:	eb18 0005 	adds.w	r0, r8, r5
 800232c:	eb49 0106 	adc.w	r1, r9, r6
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	461d      	mov	r5, r3
 8002336:	f04f 0600 	mov.w	r6, #0
 800233a:	196b      	adds	r3, r5, r5
 800233c:	eb46 0406 	adc.w	r4, r6, r6
 8002340:	461a      	mov	r2, r3
 8002342:	4623      	mov	r3, r4
 8002344:	f7fd ff9c 	bl	8000280 <__aeabi_uldivmod>
 8002348:	4603      	mov	r3, r0
 800234a:	460c      	mov	r4, r1
 800234c:	461a      	mov	r2, r3
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <UART_SetConfig+0x384>)
 8002350:	fba3 2302 	umull	r2, r3, r3, r2
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	461d      	mov	r5, r3
 800235e:	f04f 0600 	mov.w	r6, #0
 8002362:	46a9      	mov	r9, r5
 8002364:	46b2      	mov	sl, r6
 8002366:	eb19 0309 	adds.w	r3, r9, r9
 800236a:	eb4a 040a 	adc.w	r4, sl, sl
 800236e:	4699      	mov	r9, r3
 8002370:	46a2      	mov	sl, r4
 8002372:	eb19 0905 	adds.w	r9, r9, r5
 8002376:	eb4a 0a06 	adc.w	sl, sl, r6
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002386:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800238a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800238e:	4689      	mov	r9, r1
 8002390:	4692      	mov	sl, r2
 8002392:	eb19 0005 	adds.w	r0, r9, r5
 8002396:	eb4a 0106 	adc.w	r1, sl, r6
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	461d      	mov	r5, r3
 80023a0:	f04f 0600 	mov.w	r6, #0
 80023a4:	196b      	adds	r3, r5, r5
 80023a6:	eb46 0406 	adc.w	r4, r6, r6
 80023aa:	461a      	mov	r2, r3
 80023ac:	4623      	mov	r3, r4
 80023ae:	f7fd ff67 	bl	8000280 <__aeabi_uldivmod>
 80023b2:	4603      	mov	r3, r0
 80023b4:	460c      	mov	r4, r1
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <UART_SetConfig+0x384>)
 80023ba:	fba3 1302 	umull	r1, r3, r3, r2
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2164      	movs	r1, #100	; 0x64
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	3332      	adds	r3, #50	; 0x32
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <UART_SetConfig+0x384>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023da:	4498      	add	r8, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	461d      	mov	r5, r3
 80023e0:	f04f 0600 	mov.w	r6, #0
 80023e4:	46a9      	mov	r9, r5
 80023e6:	46b2      	mov	sl, r6
 80023e8:	eb19 0309 	adds.w	r3, r9, r9
 80023ec:	eb4a 040a 	adc.w	r4, sl, sl
 80023f0:	4699      	mov	r9, r3
 80023f2:	46a2      	mov	sl, r4
 80023f4:	eb19 0905 	adds.w	r9, r9, r5
 80023f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80023fc:	f04f 0100 	mov.w	r1, #0
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002408:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800240c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002410:	4689      	mov	r9, r1
 8002412:	4692      	mov	sl, r2
 8002414:	eb19 0005 	adds.w	r0, r9, r5
 8002418:	eb4a 0106 	adc.w	r1, sl, r6
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	461d      	mov	r5, r3
 8002422:	f04f 0600 	mov.w	r6, #0
 8002426:	196b      	adds	r3, r5, r5
 8002428:	eb46 0406 	adc.w	r4, r6, r6
 800242c:	461a      	mov	r2, r3
 800242e:	4623      	mov	r3, r4
 8002430:	f7fd ff26 	bl	8000280 <__aeabi_uldivmod>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	461a      	mov	r2, r3
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <UART_SetConfig+0x384>)
 800243c:	fba3 1302 	umull	r1, r3, r3, r2
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	2164      	movs	r1, #100	; 0x64
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	3332      	adds	r3, #50	; 0x32
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <UART_SetConfig+0x384>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	f003 0207 	and.w	r2, r3, #7
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4442      	add	r2, r8
 8002460:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002462:	e1b2      	b.n	80027ca <UART_SetConfig+0x6e2>
 8002464:	40011000 	.word	0x40011000
 8002468:	40011400 	.word	0x40011400
 800246c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4ad7      	ldr	r2, [pc, #860]	; (80027d4 <UART_SetConfig+0x6ec>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d005      	beq.n	8002486 <UART_SetConfig+0x39e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4ad6      	ldr	r2, [pc, #856]	; (80027d8 <UART_SetConfig+0x6f0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	f040 80d1 	bne.w	8002628 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002486:	f7ff fa7b 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 800248a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	469a      	mov	sl, r3
 8002490:	f04f 0b00 	mov.w	fp, #0
 8002494:	46d0      	mov	r8, sl
 8002496:	46d9      	mov	r9, fp
 8002498:	eb18 0308 	adds.w	r3, r8, r8
 800249c:	eb49 0409 	adc.w	r4, r9, r9
 80024a0:	4698      	mov	r8, r3
 80024a2:	46a1      	mov	r9, r4
 80024a4:	eb18 080a 	adds.w	r8, r8, sl
 80024a8:	eb49 090b 	adc.w	r9, r9, fp
 80024ac:	f04f 0100 	mov.w	r1, #0
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024c0:	4688      	mov	r8, r1
 80024c2:	4691      	mov	r9, r2
 80024c4:	eb1a 0508 	adds.w	r5, sl, r8
 80024c8:	eb4b 0609 	adc.w	r6, fp, r9
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	f04f 0400 	mov.w	r4, #0
 80024de:	0094      	lsls	r4, r2, #2
 80024e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024e4:	008b      	lsls	r3, r1, #2
 80024e6:	461a      	mov	r2, r3
 80024e8:	4623      	mov	r3, r4
 80024ea:	4628      	mov	r0, r5
 80024ec:	4631      	mov	r1, r6
 80024ee:	f7fd fec7 	bl	8000280 <__aeabi_uldivmod>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
 80024f6:	461a      	mov	r2, r3
 80024f8:	4bb8      	ldr	r3, [pc, #736]	; (80027dc <UART_SetConfig+0x6f4>)
 80024fa:	fba3 2302 	umull	r2, r3, r3, r2
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	469b      	mov	fp, r3
 8002508:	f04f 0c00 	mov.w	ip, #0
 800250c:	46d9      	mov	r9, fp
 800250e:	46e2      	mov	sl, ip
 8002510:	eb19 0309 	adds.w	r3, r9, r9
 8002514:	eb4a 040a 	adc.w	r4, sl, sl
 8002518:	4699      	mov	r9, r3
 800251a:	46a2      	mov	sl, r4
 800251c:	eb19 090b 	adds.w	r9, r9, fp
 8002520:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002530:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002534:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002538:	4689      	mov	r9, r1
 800253a:	4692      	mov	sl, r2
 800253c:	eb1b 0509 	adds.w	r5, fp, r9
 8002540:	eb4c 060a 	adc.w	r6, ip, sl
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4619      	mov	r1, r3
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	f04f 0400 	mov.w	r4, #0
 8002556:	0094      	lsls	r4, r2, #2
 8002558:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800255c:	008b      	lsls	r3, r1, #2
 800255e:	461a      	mov	r2, r3
 8002560:	4623      	mov	r3, r4
 8002562:	4628      	mov	r0, r5
 8002564:	4631      	mov	r1, r6
 8002566:	f7fd fe8b 	bl	8000280 <__aeabi_uldivmod>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	461a      	mov	r2, r3
 8002570:	4b9a      	ldr	r3, [pc, #616]	; (80027dc <UART_SetConfig+0x6f4>)
 8002572:	fba3 1302 	umull	r1, r3, r3, r2
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2164      	movs	r1, #100	; 0x64
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	3332      	adds	r3, #50	; 0x32
 8002584:	4a95      	ldr	r2, [pc, #596]	; (80027dc <UART_SetConfig+0x6f4>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002590:	4498      	add	r8, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	469b      	mov	fp, r3
 8002596:	f04f 0c00 	mov.w	ip, #0
 800259a:	46d9      	mov	r9, fp
 800259c:	46e2      	mov	sl, ip
 800259e:	eb19 0309 	adds.w	r3, r9, r9
 80025a2:	eb4a 040a 	adc.w	r4, sl, sl
 80025a6:	4699      	mov	r9, r3
 80025a8:	46a2      	mov	sl, r4
 80025aa:	eb19 090b 	adds.w	r9, r9, fp
 80025ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025c6:	4689      	mov	r9, r1
 80025c8:	4692      	mov	sl, r2
 80025ca:	eb1b 0509 	adds.w	r5, fp, r9
 80025ce:	eb4c 060a 	adc.w	r6, ip, sl
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	f04f 0400 	mov.w	r4, #0
 80025e4:	0094      	lsls	r4, r2, #2
 80025e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ea:	008b      	lsls	r3, r1, #2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	4628      	mov	r0, r5
 80025f2:	4631      	mov	r1, r6
 80025f4:	f7fd fe44 	bl	8000280 <__aeabi_uldivmod>
 80025f8:	4603      	mov	r3, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b77      	ldr	r3, [pc, #476]	; (80027dc <UART_SetConfig+0x6f4>)
 8002600:	fba3 1302 	umull	r1, r3, r3, r2
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	2164      	movs	r1, #100	; 0x64
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	3332      	adds	r3, #50	; 0x32
 8002612:	4a72      	ldr	r2, [pc, #456]	; (80027dc <UART_SetConfig+0x6f4>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	f003 020f 	and.w	r2, r3, #15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4442      	add	r2, r8
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	e0d0      	b.n	80027ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002628:	f7ff f996 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 800262c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	469a      	mov	sl, r3
 8002632:	f04f 0b00 	mov.w	fp, #0
 8002636:	46d0      	mov	r8, sl
 8002638:	46d9      	mov	r9, fp
 800263a:	eb18 0308 	adds.w	r3, r8, r8
 800263e:	eb49 0409 	adc.w	r4, r9, r9
 8002642:	4698      	mov	r8, r3
 8002644:	46a1      	mov	r9, r4
 8002646:	eb18 080a 	adds.w	r8, r8, sl
 800264a:	eb49 090b 	adc.w	r9, r9, fp
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800265a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800265e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002662:	4688      	mov	r8, r1
 8002664:	4691      	mov	r9, r2
 8002666:	eb1a 0508 	adds.w	r5, sl, r8
 800266a:	eb4b 0609 	adc.w	r6, fp, r9
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4619      	mov	r1, r3
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	f04f 0400 	mov.w	r4, #0
 8002680:	0094      	lsls	r4, r2, #2
 8002682:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002686:	008b      	lsls	r3, r1, #2
 8002688:	461a      	mov	r2, r3
 800268a:	4623      	mov	r3, r4
 800268c:	4628      	mov	r0, r5
 800268e:	4631      	mov	r1, r6
 8002690:	f7fd fdf6 	bl	8000280 <__aeabi_uldivmod>
 8002694:	4603      	mov	r3, r0
 8002696:	460c      	mov	r4, r1
 8002698:	461a      	mov	r2, r3
 800269a:	4b50      	ldr	r3, [pc, #320]	; (80027dc <UART_SetConfig+0x6f4>)
 800269c:	fba3 2302 	umull	r2, r3, r3, r2
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	469b      	mov	fp, r3
 80026aa:	f04f 0c00 	mov.w	ip, #0
 80026ae:	46d9      	mov	r9, fp
 80026b0:	46e2      	mov	sl, ip
 80026b2:	eb19 0309 	adds.w	r3, r9, r9
 80026b6:	eb4a 040a 	adc.w	r4, sl, sl
 80026ba:	4699      	mov	r9, r3
 80026bc:	46a2      	mov	sl, r4
 80026be:	eb19 090b 	adds.w	r9, r9, fp
 80026c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026da:	4689      	mov	r9, r1
 80026dc:	4692      	mov	sl, r2
 80026de:	eb1b 0509 	adds.w	r5, fp, r9
 80026e2:	eb4c 060a 	adc.w	r6, ip, sl
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	f04f 0400 	mov.w	r4, #0
 80026f8:	0094      	lsls	r4, r2, #2
 80026fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026fe:	008b      	lsls	r3, r1, #2
 8002700:	461a      	mov	r2, r3
 8002702:	4623      	mov	r3, r4
 8002704:	4628      	mov	r0, r5
 8002706:	4631      	mov	r1, r6
 8002708:	f7fd fdba 	bl	8000280 <__aeabi_uldivmod>
 800270c:	4603      	mov	r3, r0
 800270e:	460c      	mov	r4, r1
 8002710:	461a      	mov	r2, r3
 8002712:	4b32      	ldr	r3, [pc, #200]	; (80027dc <UART_SetConfig+0x6f4>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2164      	movs	r1, #100	; 0x64
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	3332      	adds	r3, #50	; 0x32
 8002726:	4a2d      	ldr	r2, [pc, #180]	; (80027dc <UART_SetConfig+0x6f4>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002732:	4498      	add	r8, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	469b      	mov	fp, r3
 8002738:	f04f 0c00 	mov.w	ip, #0
 800273c:	46d9      	mov	r9, fp
 800273e:	46e2      	mov	sl, ip
 8002740:	eb19 0309 	adds.w	r3, r9, r9
 8002744:	eb4a 040a 	adc.w	r4, sl, sl
 8002748:	4699      	mov	r9, r3
 800274a:	46a2      	mov	sl, r4
 800274c:	eb19 090b 	adds.w	r9, r9, fp
 8002750:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002768:	4689      	mov	r9, r1
 800276a:	4692      	mov	sl, r2
 800276c:	eb1b 0509 	adds.w	r5, fp, r9
 8002770:	eb4c 060a 	adc.w	r6, ip, sl
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4619      	mov	r1, r3
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	f04f 0400 	mov.w	r4, #0
 8002786:	0094      	lsls	r4, r2, #2
 8002788:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800278c:	008b      	lsls	r3, r1, #2
 800278e:	461a      	mov	r2, r3
 8002790:	4623      	mov	r3, r4
 8002792:	4628      	mov	r0, r5
 8002794:	4631      	mov	r1, r6
 8002796:	f7fd fd73 	bl	8000280 <__aeabi_uldivmod>
 800279a:	4603      	mov	r3, r0
 800279c:	460c      	mov	r4, r1
 800279e:	461a      	mov	r2, r3
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <UART_SetConfig+0x6f4>)
 80027a2:	fba3 1302 	umull	r1, r3, r3, r2
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2164      	movs	r1, #100	; 0x64
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	3332      	adds	r3, #50	; 0x32
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <UART_SetConfig+0x6f4>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4442      	add	r2, r8
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	e7ff      	b.n	80027ca <UART_SetConfig+0x6e2>
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d4:	40011000 	.word	0x40011000
 80027d8:	40011400 	.word	0x40011400
 80027dc:	51eb851f 	.word	0x51eb851f

080027e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f103 0208 	add.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f103 0208 	add.w	r2, r3, #8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f103 0208 	add.w	r2, r3, #8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002898:	d103      	bne.n	80028a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e00c      	b.n	80028bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3308      	adds	r3, #8
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e002      	b.n	80028b0 <vListInsert+0x2e>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d2f6      	bcs.n	80028aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6852      	ldr	r2, [r2, #4]
 8002914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d103      	bne.n	8002928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002948:	b580      	push	{r7, lr}
 800294a:	b090      	sub	sp, #64	; 0x40
 800294c:	af04      	add	r7, sp, #16
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
	char name[20];
	strcpy(name,pcName);
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fa00 	bl	8003d64 <strcpy>
	strcat(name,"\n\r");
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fc31 	bl	80001d0 <strlen>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4413      	add	r3, r2
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <xTaskCreate+0xc8>)
 800297a:	8811      	ldrh	r1, [r2, #0]
 800297c:	7892      	ldrb	r2, [r2, #2]
 800297e:	8019      	strh	r1, [r3, #0]
 8002980:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2,(uint8_t *)name,strlen(name),0xffff);
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fc22 	bl	80001d0 <strlen>
 800298c:	4603      	mov	r3, r0
 800298e:	b29a      	uxth	r2, r3
 8002990:	f107 0110 	add.w	r1, r7, #16
 8002994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002998:	481e      	ldr	r0, [pc, #120]	; (8002a14 <xTaskCreate+0xcc>)
 800299a:	f7ff fac2 	bl	8001f22 <HAL_UART_Transmit>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f824 	bl	80039f0 <pvPortMalloc>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxStack != NULL )
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <xTaskCreate+0x86>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029b0:	2058      	movs	r0, #88	; 0x58
 80029b2:	f001 f81d 	bl	80039f0 <pvPortMalloc>
 80029b6:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxNewTCB != NULL )
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <xTaskCreate+0x7e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
 80029c4:	e005      	b.n	80029d2 <xTaskCreate+0x8a>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c8:	f001 f8b0 	bl	8003b2c <vPortFree>
 80029cc:	e001      	b.n	80029d2 <xTaskCreate+0x8a>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <xTaskCreate+0xb8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	2300      	movs	r3, #0
 80029dc:	9303      	str	r3, [sp, #12]
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f812 	bl	8002a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029f6:	f000 f89d 	bl	8002b34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029fa:	2301      	movs	r3, #1
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fe:	e002      	b.n	8002a06 <xTaskCreate+0xbe>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		return xReturn;
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3730      	adds	r7, #48	; 0x30
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	08004584 	.word	0x08004584
 8002a14:	20001688 	.word	0x20001688

08002a18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	21a5      	movs	r1, #165	; 0xa5
 8002a32:	f001 f96e 	bl	8003d12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a40:	3b01      	subs	r3, #1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f023 0307 	bic.w	r3, r3, #7
 8002a4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e7fe      	b.n	8002a6c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01f      	beq.n	8002ab4 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e012      	b.n	8002aa0 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	7819      	ldrb	r1, [r3, #0]
 8002a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	3334      	adds	r3, #52	; 0x34
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	d9e9      	bls.n	8002a7a <prvInitialiseNewTask+0x62>
 8002aa6:	e000      	b.n	8002aaa <prvInitialiseNewTask+0x92>
			{
				break;
 8002aa8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ab2:	e003      	b.n	8002abc <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	2b0e      	cmp	r3, #14
 8002ac0:	d901      	bls.n	8002ac6 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ac2:	230e      	movs	r3, #14
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	3304      	adds	r3, #4
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fe9f 	bl	8002820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fe9a 	bl	8002820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	f1c3 020f 	rsb	r2, r3, #15
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2200      	movs	r2, #0
 8002b06:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	69b8      	ldr	r0, [r7, #24]
 8002b16:	f000 fccd 	bl	80034b4 <pxPortInitialiseStack>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b3c:	f000 fdee 	bl	800371c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b40:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <prvAddNewTaskToReadyList+0xc0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <prvAddNewTaskToReadyList+0xc0>)
 8002b48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <prvAddNewTaskToReadyList+0xc4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b52:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <prvAddNewTaskToReadyList+0xc4>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <prvAddNewTaskToReadyList+0xc0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d110      	bne.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b60:	f000 fb32 	bl	80031c8 <prvInitialiseTaskLists>
 8002b64:	e00d      	b.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <prvAddNewTaskToReadyList+0xc8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <prvAddNewTaskToReadyList+0xc4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d802      	bhi.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	; (8002bf8 <prvAddNewTaskToReadyList+0xc4>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <prvAddNewTaskToReadyList+0xcc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <prvAddNewTaskToReadyList+0xcc>)
 8002b8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <prvAddNewTaskToReadyList+0xcc>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <prvAddNewTaskToReadyList+0xd0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <prvAddNewTaskToReadyList+0xd0>)
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <prvAddNewTaskToReadyList+0xd4>)
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7ff fe3c 	bl	800283a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bc2:	f000 fdd9 	bl	8003778 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <prvAddNewTaskToReadyList+0xc8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00e      	beq.n	8002bec <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <prvAddNewTaskToReadyList+0xc4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <prvAddNewTaskToReadyList+0xd8>)
 8002bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000238 	.word	0x20000238
 8002bf8:	20000098 	.word	0x20000098
 8002bfc:	20000244 	.word	0x20000244
 8002c00:	20000254 	.word	0x20000254
 8002c04:	20000240 	.word	0x20000240
 8002c08:	2000009c 	.word	0x2000009c
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002c18:	f000 fd80 	bl	800371c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <vTaskDelete+0x18>
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <vTaskDelete+0xf4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e000      	b.n	8002c2a <vTaskDelete+0x1a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fe5f 	bl	80028f4 <uxListRemove>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d115      	bne.n	8002c68 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	4931      	ldr	r1, [pc, #196]	; (8002d08 <vTaskDelete+0xf8>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <vTaskDelete+0x58>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	2201      	movs	r2, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <vTaskDelete+0xfc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4013      	ands	r3, r2
 8002c64:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <vTaskDelete+0xfc>)
 8002c66:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3318      	adds	r3, #24
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fe3d 	bl	80028f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <vTaskDelete+0x100>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <vTaskDelete+0x100>)
 8002c82:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <vTaskDelete+0xf4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d10b      	bne.n	8002ca6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3304      	adds	r3, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	481f      	ldr	r0, [pc, #124]	; (8002d14 <vTaskDelete+0x104>)
 8002c96:	f7ff fdd0 	bl	800283a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002c9a:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <vTaskDelete+0x108>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <vTaskDelete+0x108>)
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e009      	b.n	8002cba <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <vTaskDelete+0x10c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <vTaskDelete+0x10c>)
 8002cae:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 faf5 	bl	80032a0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002cb6:	f000 fb03 	bl	80032c0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002cba:	f000 fd5d 	bl	8003778 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <vTaskDelete+0x110>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01a      	beq.n	8002cfc <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <vTaskDelete+0xf4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d115      	bne.n	8002cfc <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <vTaskDelete+0x114>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <vTaskDelete+0xdc>
 8002cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	e7fe      	b.n	8002cea <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <vTaskDelete+0x118>)
 8002cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000098 	.word	0x20000098
 8002d08:	2000009c 	.word	0x2000009c
 8002d0c:	20000240 	.word	0x20000240
 8002d10:	20000254 	.word	0x20000254
 8002d14:	2000020c 	.word	0x2000020c
 8002d18:	20000220 	.word	0x20000220
 8002d1c:	20000238 	.word	0x20000238
 8002d20:	20000244 	.word	0x20000244
 8002d24:	20000260 	.word	0x20000260
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d3e:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <vTaskDelay+0x60>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <vTaskDelay+0x2e>
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	e7fe      	b.n	8002d58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002d5a:	f000 f861 	bl	8002e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 facd 	bl	8003300 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d66:	f000 f869 	bl	8002e3c <xTaskResumeAll>
 8002d6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <vTaskDelay+0x64>)
 8002d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000260 	.word	0x20000260
 8002d90:	e000ed04 	.word	0xe000ed04

08002d94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <vTaskStartScheduler+0x74>)
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	2300      	movs	r3, #0
 8002da4:	2282      	movs	r2, #130	; 0x82
 8002da6:	4919      	ldr	r1, [pc, #100]	; (8002e0c <vTaskStartScheduler+0x78>)
 8002da8:	4819      	ldr	r0, [pc, #100]	; (8002e10 <vTaskStartScheduler+0x7c>)
 8002daa:	f7ff fdcd 	bl	8002948 <xTaskCreate>
 8002dae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d115      	bne.n	8002de2 <vTaskStartScheduler+0x4e>
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <vTaskStartScheduler+0x80>)
 8002dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <vTaskStartScheduler+0x84>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <vTaskStartScheduler+0x88>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ddc:	f000 fbf0 	bl	80035c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002de0:	e00d      	b.n	8002dfe <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d109      	bne.n	8002dfe <vTaskStartScheduler+0x6a>
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	e7fe      	b.n	8002dfc <vTaskStartScheduler+0x68>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	2000025c 	.word	0x2000025c
 8002e0c:	08004588 	.word	0x08004588
 8002e10:	08003199 	.word	0x08003199
 8002e14:	20000258 	.word	0x20000258
 8002e18:	20000244 	.word	0x20000244
 8002e1c:	2000023c 	.word	0x2000023c

08002e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <vTaskSuspendAll+0x18>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	4a03      	ldr	r2, [pc, #12]	; (8002e38 <vTaskSuspendAll+0x18>)
 8002e2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	20000260 	.word	0x20000260

08002e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <xTaskResumeAll+0x2a>
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	e7fe      	b.n	8002e64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e66:	f000 fc59 	bl	800371c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	4a37      	ldr	r2, [pc, #220]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e74:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <xTaskResumeAll+0x114>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d161      	bne.n	8002f40 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e7c:	4b35      	ldr	r3, [pc, #212]	; (8002f54 <xTaskResumeAll+0x118>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05d      	beq.n	8002f40 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e84:	e02e      	b.n	8002ee4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e86:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <xTaskResumeAll+0x11c>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3318      	adds	r3, #24
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fd2e 	bl	80028f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fd29 	bl	80028f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <xTaskResumeAll+0x120>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <xTaskResumeAll+0x120>)
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <xTaskResumeAll+0x124>)
 8002ec2:	441a      	add	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff fcb5 	bl	800283a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <xTaskResumeAll+0x128>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <xTaskResumeAll+0x12c>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <xTaskResumeAll+0x11c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1cc      	bne.n	8002e86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ef2:	f000 f9e5 	bl	80032c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <xTaskResumeAll+0x130>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d010      	beq.n	8002f24 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f02:	f000 f837 	bl	8002f74 <xTaskIncrementTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <xTaskResumeAll+0x12c>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f1      	bne.n	8002f02 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <xTaskResumeAll+0x130>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <xTaskResumeAll+0x12c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <xTaskResumeAll+0x134>)
 8002f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f40:	f000 fc1a 	bl	8003778 <vPortExitCritical>

	return xAlreadyYielded;
 8002f44:	68bb      	ldr	r3, [r7, #8]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000260 	.word	0x20000260
 8002f54:	20000238 	.word	0x20000238
 8002f58:	200001f8 	.word	0x200001f8
 8002f5c:	20000240 	.word	0x20000240
 8002f60:	2000009c 	.word	0x2000009c
 8002f64:	20000098 	.word	0x20000098
 8002f68:	2000024c 	.word	0x2000024c
 8002f6c:	20000248 	.word	0x20000248
 8002f70:	e000ed04 	.word	0xe000ed04

08002f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f7e:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <xTaskIncrementTick+0x144>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 8087 	bne.w	8003096 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f88:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <xTaskIncrementTick+0x148>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f90:	4a4a      	ldr	r2, [pc, #296]	; (80030bc <xTaskIncrementTick+0x148>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11f      	bne.n	8002fdc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <xTaskIncrementTick+0x14c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <xTaskIncrementTick+0x46>
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	e7fe      	b.n	8002fb8 <xTaskIncrementTick+0x44>
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <xTaskIncrementTick+0x14c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <xTaskIncrementTick+0x150>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a3e      	ldr	r2, [pc, #248]	; (80030c0 <xTaskIncrementTick+0x14c>)
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4a3e      	ldr	r2, [pc, #248]	; (80030c4 <xTaskIncrementTick+0x150>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <xTaskIncrementTick+0x154>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a3c      	ldr	r2, [pc, #240]	; (80030c8 <xTaskIncrementTick+0x154>)
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	f000 f972 	bl	80032c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <xTaskIncrementTick+0x158>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d348      	bcc.n	8003078 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <xTaskIncrementTick+0x14c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff0:	4b36      	ldr	r3, [pc, #216]	; (80030cc <xTaskIncrementTick+0x158>)
 8002ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff6:	601a      	str	r2, [r3, #0]
					break;
 8002ff8:	e03e      	b.n	8003078 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <xTaskIncrementTick+0x14c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d203      	bcs.n	800301a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003012:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <xTaskIncrementTick+0x158>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003018:	e02e      	b.n	8003078 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3304      	adds	r3, #4
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fc68 	bl	80028f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3318      	adds	r3, #24
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fc5f 	bl	80028f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	2201      	movs	r2, #1
 800303c:	409a      	lsls	r2, r3
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <xTaskIncrementTick+0x15c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <xTaskIncrementTick+0x15c>)
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <xTaskIncrementTick+0x160>)
 8003056:	441a      	add	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7ff fbeb 	bl	800283a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <xTaskIncrementTick+0x164>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	429a      	cmp	r2, r3
 8003070:	d3b9      	bcc.n	8002fe6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003072:	2301      	movs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003076:	e7b6      	b.n	8002fe6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <xTaskIncrementTick+0x164>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	4915      	ldr	r1, [pc, #84]	; (80030d4 <xTaskIncrementTick+0x160>)
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d907      	bls.n	80030a0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003090:	2301      	movs	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e004      	b.n	80030a0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <xTaskIncrementTick+0x168>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <xTaskIncrementTick+0x168>)
 800309e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <xTaskIncrementTick+0x16c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030ac:	697b      	ldr	r3, [r7, #20]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000260 	.word	0x20000260
 80030bc:	2000023c 	.word	0x2000023c
 80030c0:	200001f0 	.word	0x200001f0
 80030c4:	200001f4 	.word	0x200001f4
 80030c8:	20000250 	.word	0x20000250
 80030cc:	20000258 	.word	0x20000258
 80030d0:	20000240 	.word	0x20000240
 80030d4:	2000009c 	.word	0x2000009c
 80030d8:	20000098 	.word	0x20000098
 80030dc:	20000248 	.word	0x20000248
 80030e0:	2000024c 	.word	0x2000024c

080030e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <vTaskSwitchContext+0xa0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <vTaskSwitchContext+0xa4>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030f8:	e03e      	b.n	8003178 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <vTaskSwitchContext+0xa4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <vTaskSwitchContext+0xa8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	f1c3 031f 	rsb	r3, r3, #31
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	491e      	ldr	r1, [pc, #120]	; (8003190 <vTaskSwitchContext+0xac>)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <vTaskSwitchContext+0x5a>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	e7fe      	b.n	800313c <vTaskSwitchContext+0x58>
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4a11      	ldr	r2, [pc, #68]	; (8003190 <vTaskSwitchContext+0xac>)
 800314a:	4413      	add	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	3308      	adds	r3, #8
 8003160:	429a      	cmp	r2, r3
 8003162:	d104      	bne.n	800316e <vTaskSwitchContext+0x8a>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a07      	ldr	r2, [pc, #28]	; (8003194 <vTaskSwitchContext+0xb0>)
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	20000260 	.word	0x20000260
 8003188:	2000024c 	.word	0x2000024c
 800318c:	20000240 	.word	0x20000240
 8003190:	2000009c 	.word	0x2000009c
 8003194:	20000098 	.word	0x20000098

08003198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031a0:	f000 f852 	bl	8003248 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <prvIdleTask+0x28>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d9f9      	bls.n	80031a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <prvIdleTask+0x2c>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031bc:	e7f0      	b.n	80031a0 <prvIdleTask+0x8>
 80031be:	bf00      	nop
 80031c0:	2000009c 	.word	0x2000009c
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e00c      	b.n	80031ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <prvInitialiseTaskLists+0x60>)
 80031e0:	4413      	add	r3, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fafc 	bl	80027e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0e      	cmp	r3, #14
 80031f2:	d9ef      	bls.n	80031d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <prvInitialiseTaskLists+0x64>)
 80031f6:	f7ff faf3 	bl	80027e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031fa:	480d      	ldr	r0, [pc, #52]	; (8003230 <prvInitialiseTaskLists+0x68>)
 80031fc:	f7ff faf0 	bl	80027e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003200:	480c      	ldr	r0, [pc, #48]	; (8003234 <prvInitialiseTaskLists+0x6c>)
 8003202:	f7ff faed 	bl	80027e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003206:	480c      	ldr	r0, [pc, #48]	; (8003238 <prvInitialiseTaskLists+0x70>)
 8003208:	f7ff faea 	bl	80027e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800320c:	480b      	ldr	r0, [pc, #44]	; (800323c <prvInitialiseTaskLists+0x74>)
 800320e:	f7ff fae7 	bl	80027e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <prvInitialiseTaskLists+0x78>)
 8003214:	4a05      	ldr	r2, [pc, #20]	; (800322c <prvInitialiseTaskLists+0x64>)
 8003216:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <prvInitialiseTaskLists+0x7c>)
 800321a:	4a05      	ldr	r2, [pc, #20]	; (8003230 <prvInitialiseTaskLists+0x68>)
 800321c:	601a      	str	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000009c 	.word	0x2000009c
 800322c:	200001c8 	.word	0x200001c8
 8003230:	200001dc 	.word	0x200001dc
 8003234:	200001f8 	.word	0x200001f8
 8003238:	2000020c 	.word	0x2000020c
 800323c:	20000224 	.word	0x20000224
 8003240:	200001f0 	.word	0x200001f0
 8003244:	200001f4 	.word	0x200001f4

08003248 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800324e:	e019      	b.n	8003284 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003250:	f000 fa64 	bl	800371c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <prvCheckTasksWaitingTermination+0x4c>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fb47 	bl	80028f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <prvCheckTasksWaitingTermination+0x50>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3b01      	subs	r3, #1
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <prvCheckTasksWaitingTermination+0x50>)
 800326e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <prvCheckTasksWaitingTermination+0x54>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3b01      	subs	r3, #1
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <prvCheckTasksWaitingTermination+0x54>)
 8003278:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800327a:	f000 fa7d 	bl	8003778 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f80e 	bl	80032a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <prvCheckTasksWaitingTermination+0x54>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e1      	bne.n	8003250 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	2000020c 	.word	0x2000020c
 8003298:	20000238 	.word	0x20000238
 800329c:	20000220 	.word	0x20000220

080032a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fc3d 	bl	8003b2c <vPortFree>
			vPortFree( pxTCB );
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fc3a 	bl	8003b2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <prvResetNextTaskUnblockTime+0x38>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <prvResetNextTaskUnblockTime+0x3c>)
 80032d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032d8:	e008      	b.n	80032ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <prvResetNextTaskUnblockTime+0x38>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <prvResetNextTaskUnblockTime+0x3c>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	200001f0 	.word	0x200001f0
 80032fc:	20000258 	.word	0x20000258

08003300 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800330a:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003310:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff faec 	bl	80028f4 <uxListRemove>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2201      	movs	r2, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4013      	ands	r3, r2
 8003336:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003338:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003340:	d10a      	bne.n	8003358 <prvAddCurrentTaskToDelayedList+0x58>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	481a      	ldr	r0, [pc, #104]	; (80033bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003352:	f7ff fa72 	bl	800283a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003356:	e026      	b.n	80033a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	d209      	bcs.n	8003384 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7ff fa80 	bl	8002882 <vListInsert>
}
 8003382:	e010      	b.n	80033a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7ff fa76 	bl	8002882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d202      	bcs.n	80033a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033a0:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6013      	str	r3, [r2, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000023c 	.word	0x2000023c
 80033b4:	20000098 	.word	0x20000098
 80033b8:	20000240 	.word	0x20000240
 80033bc:	20000224 	.word	0x20000224
 80033c0:	200001f4 	.word	0x200001f4
 80033c4:	200001f0 	.word	0x200001f0
 80033c8:	20000258 	.word	0x20000258

080033cc <Uint32ConvertHex>:
			end--;
		}
		charTxScanTaskStack[j++] = 0;
}

void Uint32ConvertHex(uint32_t pStack, char *charTxScanTaskStack){
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	uint32_t remainder,quotient;
	int j =  0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
	int reversal = 2,end = 0;
 80033da:	2302      	movs	r3, #2
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
	char reversalChar;

	quotient = pStack;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	61fb      	str	r3, [r7, #28]
	charTxScanTaskStack[j++] = 48;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	61ba      	str	r2, [r7, #24]
 80033ec:	461a      	mov	r2, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	2230      	movs	r2, #48	; 0x30
 80033f4:	701a      	strb	r2, [r3, #0]
	charTxScanTaskStack[j++] = 88;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	61ba      	str	r2, [r7, #24]
 80033fc:	461a      	mov	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	4413      	add	r3, r2
 8003402:	2258      	movs	r2, #88	; 0x58
 8003404:	701a      	strb	r2, [r3, #0]
	while (quotient != 0)
 8003406:	e020      	b.n	800344a <Uint32ConvertHex+0x7e>
	{
		remainder = quotient % 16;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	60bb      	str	r3, [r7, #8]
		if (remainder < 10)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b09      	cmp	r3, #9
 8003414:	d80b      	bhi.n	800342e <Uint32ConvertHex+0x62>
			charTxScanTaskStack[j++] = '0' + remainder;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1c59      	adds	r1, r3, #1
 800341e:	61b9      	str	r1, [r7, #24]
 8003420:	4619      	mov	r1, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	440b      	add	r3, r1
 8003426:	3230      	adds	r2, #48	; 0x30
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e00a      	b.n	8003444 <Uint32ConvertHex+0x78>
		else
			charTxScanTaskStack[j++] = 55 + remainder; // A = 65;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	61b9      	str	r1, [r7, #24]
 8003438:	4619      	mov	r1, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	440b      	add	r3, r1
 800343e:	3237      	adds	r2, #55	; 0x37
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
		quotient = quotient / 16;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	61fb      	str	r3, [r7, #28]
	while (quotient != 0)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1db      	bne.n	8003408 <Uint32ConvertHex+0x3c>
	}
	end = j-1;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	3b01      	subs	r3, #1
 8003454:	613b      	str	r3, [r7, #16]
	for(reversal;reversal<=(end/2)+1;reversal++){
 8003456:	e017      	b.n	8003488 <Uint32ConvertHex+0xbc>
		reversalChar = charTxScanTaskStack[reversal];
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4413      	add	r3, r2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	73fb      	strb	r3, [r7, #15]
		charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	441a      	add	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	440b      	add	r3, r1
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	701a      	strb	r2, [r3, #0]
		charTxScanTaskStack[end] = reversalChar;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4413      	add	r3, r2
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	701a      	strb	r2, [r3, #0]
		end--;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3b01      	subs	r3, #1
 8003480:	613b      	str	r3, [r7, #16]
	for(reversal;reversal<=(end/2)+1;reversal++){
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	0fda      	lsrs	r2, r3, #31
 800348c:	4413      	add	r3, r2
 800348e:	105b      	asrs	r3, r3, #1
 8003490:	3301      	adds	r3, #1
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	dddf      	ble.n	8003458 <Uint32ConvertHex+0x8c>
	}
	charTxScanTaskStack[j++] = 0;
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	61ba      	str	r2, [r7, #24]
 800349e:	461a      	mov	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	3724      	adds	r7, #36	; 0x24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3b04      	subs	r3, #4
 80034c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b04      	subs	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f023 0201 	bic.w	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3b04      	subs	r3, #4
 80034e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034e4:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <pxPortInitialiseStack+0x64>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3b14      	subs	r3, #20
 80034ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b04      	subs	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f06f 0202 	mvn.w	r2, #2
 8003502:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3b20      	subs	r3, #32
 8003508:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	0800351d 	.word	0x0800351d

0800351c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <prvTaskExitError+0x50>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352e:	d009      	beq.n	8003544 <prvTaskExitError+0x28>
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e7fe      	b.n	8003542 <prvTaskExitError+0x26>
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003556:	bf00      	nop
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0fc      	beq.n	8003558 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	2000000c 	.word	0x2000000c

08003570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <pxCurrentTCBConst2>)
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	6808      	ldr	r0, [r1, #0]
 8003576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357a:	f380 8809 	msr	PSP, r0
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f380 8811 	msr	BASEPRI, r0
 800358a:	4770      	bx	lr
 800358c:	f3af 8000 	nop.w

08003590 <pxCurrentTCBConst2>:
 8003590:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop

08003598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003598:	4808      	ldr	r0, [pc, #32]	; (80035bc <prvPortStartFirstTask+0x24>)
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	f380 8808 	msr	MSP, r0
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f380 8814 	msr	CONTROL, r0
 80035aa:	b662      	cpsie	i
 80035ac:	b661      	cpsie	f
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	df00      	svc	0
 80035b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035ba:	bf00      	nop
 80035bc:	e000ed08 	.word	0xe000ed08

080035c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035c6:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <xPortStartScheduler+0x138>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4c      	ldr	r2, [pc, #304]	; (80036fc <xPortStartScheduler+0x13c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d109      	bne.n	80035e4 <xPortStartScheduler+0x24>
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e7fe      	b.n	80035e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035e4:	4b44      	ldr	r3, [pc, #272]	; (80036f8 <xPortStartScheduler+0x138>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a45      	ldr	r2, [pc, #276]	; (8003700 <xPortStartScheduler+0x140>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d109      	bne.n	8003602 <xPortStartScheduler+0x42>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e7fe      	b.n	8003600 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003602:	4b40      	ldr	r3, [pc, #256]	; (8003704 <xPortStartScheduler+0x144>)
 8003604:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	22ff      	movs	r2, #255	; 0xff
 8003612:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4b38      	ldr	r3, [pc, #224]	; (8003708 <xPortStartScheduler+0x148>)
 8003628:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800362a:	4b38      	ldr	r3, [pc, #224]	; (800370c <xPortStartScheduler+0x14c>)
 800362c:	2207      	movs	r2, #7
 800362e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003630:	e009      	b.n	8003646 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <xPortStartScheduler+0x14c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3b01      	subs	r3, #1
 8003638:	4a34      	ldr	r2, [pc, #208]	; (800370c <xPortStartScheduler+0x14c>)
 800363a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b80      	cmp	r3, #128	; 0x80
 8003650:	d0ef      	beq.n	8003632 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <xPortStartScheduler+0x14c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1c3 0307 	rsb	r3, r3, #7
 800365a:	2b04      	cmp	r3, #4
 800365c:	d009      	beq.n	8003672 <xPortStartScheduler+0xb2>
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e7fe      	b.n	8003670 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <xPortStartScheduler+0x14c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1c3 0307 	rsb	r3, r3, #7
 800367a:	2b04      	cmp	r3, #4
 800367c:	d009      	beq.n	8003692 <xPortStartScheduler+0xd2>
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e7fe      	b.n	8003690 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003692:	4b1e      	ldr	r3, [pc, #120]	; (800370c <xPortStartScheduler+0x14c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <xPortStartScheduler+0x14c>)
 800369a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <xPortStartScheduler+0x14c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <xPortStartScheduler+0x14c>)
 80036a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <xPortStartScheduler+0x150>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a16      	ldr	r2, [pc, #88]	; (8003710 <xPortStartScheduler+0x150>)
 80036b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <xPortStartScheduler+0x150>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a13      	ldr	r2, [pc, #76]	; (8003710 <xPortStartScheduler+0x150>)
 80036c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036c8:	f000 f8d6 	bl	8003878 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <xPortStartScheduler+0x154>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80036d2:	f000 f8f5 	bl	80038c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <xPortStartScheduler+0x158>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <xPortStartScheduler+0x158>)
 80036dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036e2:	f7ff ff59 	bl	8003598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036e6:	f7ff fcfd 	bl	80030e4 <vTaskSwitchContext>
	prvTaskExitError();
 80036ea:	f7ff ff17 	bl	800351c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	e000ed00 	.word	0xe000ed00
 80036fc:	410fc271 	.word	0x410fc271
 8003700:	410fc270 	.word	0x410fc270
 8003704:	e000e400 	.word	0xe000e400
 8003708:	20000264 	.word	0x20000264
 800370c:	20000268 	.word	0x20000268
 8003710:	e000ed20 	.word	0xe000ed20
 8003714:	2000000c 	.word	0x2000000c
 8003718:	e000ef34 	.word	0xe000ef34

0800371c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <vPortEnterCritical+0x54>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <vPortEnterCritical+0x54>)
 800373c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <vPortEnterCritical+0x54>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10e      	bne.n	8003764 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <vPortEnterCritical+0x58>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <vPortEnterCritical+0x48>
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	e7fe      	b.n	8003762 <vPortEnterCritical+0x46>
	}
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	2000000c 	.word	0x2000000c
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <vPortExitCritical+0x4c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <vPortExitCritical+0x22>
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	e7fe      	b.n	8003798 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <vPortExitCritical+0x4c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3b01      	subs	r3, #1
 80037a0:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <vPortExitCritical+0x4c>)
 80037a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <vPortExitCritical+0x4c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <vPortExitCritical+0x3e>
 80037ac:	2300      	movs	r3, #0
 80037ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	2000000c 	.word	0x2000000c
	...

080037d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037d0:	f3ef 8009 	mrs	r0, PSP
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <pxCurrentTCBConst>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	f01e 0f10 	tst.w	lr, #16
 80037e0:	bf08      	it	eq
 80037e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ea:	6010      	str	r0, [r2, #0]
 80037ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037f4:	f380 8811 	msr	BASEPRI, r0
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f7ff fc70 	bl	80030e4 <vTaskSwitchContext>
 8003804:	f04f 0000 	mov.w	r0, #0
 8003808:	f380 8811 	msr	BASEPRI, r0
 800380c:	bc09      	pop	{r0, r3}
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	6808      	ldr	r0, [r1, #0]
 8003812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003816:	f01e 0f10 	tst.w	lr, #16
 800381a:	bf08      	it	eq
 800381c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003820:	f380 8809 	msr	PSP, r0
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	f3af 8000 	nop.w

08003830 <pxCurrentTCBConst>:
 8003830:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop

08003838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003850:	f7ff fb90 	bl	8002f74 <xTaskIncrementTick>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <SysTick_Handler+0x3c>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <vPortSetupTimerInterrupt+0x34>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <vPortSetupTimerInterrupt+0x38>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <vPortSetupTimerInterrupt+0x3c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <vPortSetupTimerInterrupt+0x40>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	4a09      	ldr	r2, [pc, #36]	; (80038bc <vPortSetupTimerInterrupt+0x44>)
 8003896:	3b01      	subs	r3, #1
 8003898:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800389a:	4b04      	ldr	r3, [pc, #16]	; (80038ac <vPortSetupTimerInterrupt+0x34>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010
 80038b0:	e000e018 	.word	0xe000e018
 80038b4:	20000000 	.word	0x20000000
 80038b8:	10624dd3 	.word	0x10624dd3
 80038bc:	e000e014 	.word	0xe000e014

080038c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80038c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038d0 <vPortEnableVFP+0x10>
 80038c4:	6801      	ldr	r1, [r0, #0]
 80038c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038ca:	6001      	str	r1, [r0, #0]
 80038cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038ce:	bf00      	nop
 80038d0:	e000ed88 	.word	0xe000ed88

080038d4 <prvInsertBlockIntoFreeList>:
 * Insert a block into the list of free blocks - which is ordered by size of
 * the block.  Small blocks at the start of the list and large blocks at the end
 * of the list.
 */
void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
size_t xBlockSize;
uint32_t TotalSize;
BlockLink_t *pxScanSmall = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
pxScanSmall->xBlockSize = 0;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2200      	movs	r2, #0
 80038e4:	605a      	str	r2, [r3, #4]
BlockLink_t *pxScanBig = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
pxScanBig->xBlockSize = 0 ;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	605a      	str	r2, [r3, #4]
uint8_t merge = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	74fb      	strb	r3, [r7, #19]

xBlockSize = pxBlockToInsert->xBlockSize;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60fb      	str	r3, [r7, #12]

	for(pxIterator = &xStart;pxIterator->pxNextFreeBlock != NULL ; ){
 80038fa:	4b3c      	ldr	r3, [pc, #240]	; (80039ec <prvInsertBlockIntoFreeList+0x118>)
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e035      	b.n	800396c <prvInsertBlockIntoFreeList+0x98>
		/* 如果 insert item address > free list item address*/
		if( pxBlockToInsert >  (uint32_t)(pxIterator->pxNextFreeBlock))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d917      	bls.n	800393a <prvInsertBlockIntoFreeList+0x66>
		{
			TotalSize = (uint32_t)(pxIterator->pxNextFreeBlock) + (pxIterator->pxNextFreeBlock->xBlockSize);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4413      	add	r3, r2
 8003918:	60bb      	str	r3, [r7, #8]
			/* free list item address + size =  insert item address */
			if(TotalSize == (uint32_t)pxBlockToInsert)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d121      	bne.n	8003966 <prvInsertBlockIntoFreeList+0x92>
			{
				pxScanSmall = (pxIterator->pxNextFreeBlock);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]
				pxIterator->pxNextFreeBlock = pxScanSmall->pxNextFreeBlock;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	601a      	str	r2, [r3, #0]
				pxIterator = pxScanSmall;
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	61fb      	str	r3, [r7, #28]
				merge = 1;
 8003934:	2301      	movs	r3, #1
 8003936:	74fb      	strb	r3, [r7, #19]
				continue;
 8003938:	e018      	b.n	800396c <prvInsertBlockIntoFreeList+0x98>
			}
		}
		else
		{
			TotalSize = (uint32_t)pxBlockToInsert + xBlockSize;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	60bb      	str	r3, [r7, #8]
			if(TotalSize == (uint32_t)(pxIterator->pxNextFreeBlock))
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4293      	cmp	r3, r2
 800394c:	d10b      	bne.n	8003966 <prvInsertBlockIntoFreeList+0x92>
			{
				pxScanBig = (pxIterator->pxNextFreeBlock);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]
				pxIterator->pxNextFreeBlock = pxScanBig->pxNextFreeBlock;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	601a      	str	r2, [r3, #0]
				pxIterator = pxScanBig;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	61fb      	str	r3, [r7, #28]
				merge = 1;
 8003960:	2301      	movs	r3, #1
 8003962:	74fb      	strb	r3, [r7, #19]
				continue;
 8003964:	e002      	b.n	800396c <prvInsertBlockIntoFreeList+0x98>
			}
		}
		pxIterator = pxIterator->pxNextFreeBlock;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	61fb      	str	r3, [r7, #28]
	for(pxIterator = &xStart;pxIterator->pxNextFreeBlock != NULL ; ){
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1c5      	bne.n	8003900 <prvInsertBlockIntoFreeList+0x2c>
	}
	if(merge){
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01c      	beq.n	80039b4 <prvInsertBlockIntoFreeList+0xe0>
		if(pxScanSmall){
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <prvInsertBlockIntoFreeList+0xd2>
			pxBlockToInsert = pxScanSmall;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	607b      	str	r3, [r7, #4]
			pxBlockToInsert->xBlockSize = (pxScanSmall->xBlockSize)+xBlockSize;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]
			if(pxScanBig){
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00e      	beq.n	80039b4 <prvInsertBlockIntoFreeList+0xe0>
				pxBlockToInsert->xBlockSize += pxScanBig->xBlockSize;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	e006      	b.n	80039b4 <prvInsertBlockIntoFreeList+0xe0>
			}
		}
		else{
			pxBlockToInsert->xBlockSize += pxScanBig->xBlockSize;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	441a      	add	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]
		}
	}
	xBlockSize = pxBlockToInsert->xBlockSize;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
	/* Iterate through the list until a block is found that has a larger size */
	/* than the block we are inserting. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIterator->pxNextFreeBlock )
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <prvInsertBlockIntoFreeList+0x118>)
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e002      	b.n	80039c6 <prvInsertBlockIntoFreeList+0xf2>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d8f6      	bhi.n	80039c0 <prvInsertBlockIntoFreeList+0xec>

	}

	/* Update the list to include the block being inserted in the correct */
	/* position. */
	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
	pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	3724      	adds	r7, #36	; 0x24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	2000166c 	.word	0x2000166c

080039f0 <pvPortMalloc>:
/*-----------------------------------------------------------*/
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b09e      	sub	sp, #120	; 0x78
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	667b      	str	r3, [r7, #100]	; 0x64
size_t BlockSize,WantedSize;
char data[80];
WantedSize = xWantedSize;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	663b      	str	r3, [r7, #96]	; 0x60
	vTaskSuspendAll();
 8003a00:	f7ff fa0e 	bl	8002e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8003a04:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <pvPortMalloc+0x124>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <pvPortMalloc+0x26>
		{
			prvHeapInit();
 8003a0c:	f000 f8b2 	bl	8003b74 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003a10:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <pvPortMalloc+0x124>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <pvPortMalloc+0x4a>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <pvPortMalloc+0x4a>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	3308      	adds	r3, #8
 8003a38:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d044      	beq.n	8003aca <pvPortMalloc+0xda>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f241 32f7 	movw	r2, #5111	; 0x13f7
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d83f      	bhi.n	8003aca <pvPortMalloc+0xda>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8003a4a:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <pvPortMalloc+0x128>)
 8003a4c:	66bb      	str	r3, [r7, #104]	; 0x68
			pxBlock = xStart.pxNextFreeBlock;
 8003a4e:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <pvPortMalloc+0x128>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	66fb      	str	r3, [r7, #108]	; 0x6c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a54:	e004      	b.n	8003a60 <pvPortMalloc+0x70>
			{
				pxPreviousBlock = pxBlock;
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	66bb      	str	r3, [r7, #104]	; 0x68
				pxBlock = pxBlock->pxNextFreeBlock;
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d903      	bls.n	8003a72 <pvPortMalloc+0x82>
 8003a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f1      	bne.n	8003a56 <pvPortMalloc+0x66>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <pvPortMalloc+0x12c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d027      	beq.n	8003aca <pvPortMalloc+0xda>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	4413      	add	r3, r2
 8003a82:	667b      	str	r3, [r7, #100]	; 0x64

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a8a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2208      	movs	r2, #8
 8003a96:	0052      	lsls	r2, r2, #1
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d90f      	bls.n	8003abc <pvPortMalloc+0xcc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	65fb      	str	r3, [r7, #92]	; 0x5c

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aae:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8003ab6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003ab8:	f7ff ff0c 	bl	80038d4 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003abc:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <pvPortMalloc+0x130>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <pvPortMalloc+0x130>)
 8003ac8:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003aca:	f7ff f9b7 	bl	8002e3c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	BlockSize = xWantedSize;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65bb      	str	r3, [r7, #88]	; 0x58
	sprintf(data,"pvReturn:%p heapSTRUCT_SIZE:%0d WantedSize:%0d BlockSize:%0d\n\r",pvReturn,heapSTRUCT_SIZE,WantedSize,BlockSize);
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f107 0008 	add.w	r0, r7, #8
 8003ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ae6:	490f      	ldr	r1, [pc, #60]	; (8003b24 <pvPortMalloc+0x134>)
 8003ae8:	f000 f91c 	bl	8003d24 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)data,strlen(data),0xffff);
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fb6d 	bl	80001d0 <strlen>
 8003af6:	4603      	mov	r3, r0
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	f107 0108 	add.w	r1, r7, #8
 8003afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b02:	4809      	ldr	r0, [pc, #36]	; (8003b28 <pvPortMalloc+0x138>)
 8003b04:	f7fe fa0d 	bl	8001f22 <HAL_UART_Transmit>
	return pvReturn;
 8003b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3770      	adds	r7, #112	; 0x70
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	2000167c 	.word	0x2000167c
 8003b18:	2000166c 	.word	0x2000166c
 8003b1c:	20001674 	.word	0x20001674
 8003b20:	20000010 	.word	0x20000010
 8003b24:	08004618 	.word	0x08004618
 8003b28:	20001688 	.word	0x20001688

08003b2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d014      	beq.n	8003b68 <vPortFree+0x3c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8003b3e:	2308      	movs	r3, #8
 8003b40:	425b      	negs	r3, r3
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
 8003b4c:	f7ff f968 	bl	8002e20 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b50:	68b8      	ldr	r0, [r7, #8]
 8003b52:	f7ff febf 	bl	80038d4 <prvInsertBlockIntoFreeList>
			xFreeBytesRemaining += pxLink->xBlockSize;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <vPortFree+0x44>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <vPortFree+0x44>)
 8003b62:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8003b64:	f7ff f96a 	bl	8002e3c <xTaskResumeAll>
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000010 	.word	0x20000010

08003b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <prvHeapInit+0x48>)
 8003b7c:	f023 0307 	bic.w	r3, r3, #7
 8003b80:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b82:	4a0f      	ldr	r2, [pc, #60]	; (8003bc0 <prvHeapInit+0x4c>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b88:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <prvHeapInit+0x4c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <prvHeapInit+0x50>)
 8003b90:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003b94:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <prvHeapInit+0x50>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003ba6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <prvHeapInit+0x50>)
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000274 	.word	0x20000274
 8003bc0:	2000166c 	.word	0x2000166c
 8003bc4:	20001674 	.word	0x20001674

08003bc8 <vPrintFreeList>:
/*-----------------------------------------------------------*/
void vPrintFreeList( void ){
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b09f      	sub	sp, #124	; 0x7c
 8003bcc:	af02      	add	r7, sp, #8
size_t ScanBlockSize = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	66bb      	str	r3, [r7, #104]	; 0x68
BlockLink_t *pxScanNextFreeBlock;
char TxFreeListInfo[] = "StartAddress     |heapSTRUCT_SIZE   |xBlockSize      |EndAddress \n\r";
 8003bd2:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <vPrintFreeList+0xd0>)
 8003bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd8:	4611      	mov	r1, r2
 8003bda:	2244      	movs	r2, #68	; 0x44
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f88d 	bl	8003cfc <memcpy>
char StartTemp[15] = {0};
 8003be2:	f107 0314 	add.w	r3, r7, #20
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	f8c3 200b 	str.w	r2, [r3, #11]
char EndTemp[15] = {0};
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	f8c3 200b 	str.w	r2, [r3, #11]
	HAL_UART_Transmit(&huart2,(uint8_t *)TxFreeListInfo,sizeof(TxFreeListInfo),0xffff);
 8003c00:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c08:	2244      	movs	r2, #68	; 0x44
 8003c0a:	4824      	ldr	r0, [pc, #144]	; (8003c9c <vPrintFreeList+0xd4>)
 8003c0c:	f7fe f989 	bl	8001f22 <HAL_UART_Transmit>
	memset(TxFreeListInfo,'\0',sizeof(TxFreeListInfo));
 8003c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c14:	2244      	movs	r2, #68	; 0x44
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f87a 	bl	8003d12 <memset>
	pxScanNextFreeBlock = &xStart;
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <vPrintFreeList+0xd8>)
 8003c20:	66fb      	str	r3, [r7, #108]	; 0x6c
	for( ; pxScanNextFreeBlock->pxNextFreeBlock != NULL; pxScanNextFreeBlock = pxScanNextFreeBlock->pxNextFreeBlock){
 8003c22:	e031      	b.n	8003c88 <vPrintFreeList+0xc0>
		if(pxScanNextFreeBlock->xBlockSize == 0){
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d029      	beq.n	8003c80 <vPrintFreeList+0xb8>
			continue;
		}
		ScanBlockSize = (pxScanNextFreeBlock->xBlockSize) + (uint32_t)pxScanNextFreeBlock;
 8003c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c32:	4413      	add	r3, r2
 8003c34:	66bb      	str	r3, [r7, #104]	; 0x68
		Uint32ConvertHex(pxScanNextFreeBlock,StartTemp);
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	f107 0214 	add.w	r2, r7, #20
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fbc4 	bl	80033cc <Uint32ConvertHex>
		Uint32ConvertHex(ScanBlockSize,EndTemp);
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003c4a:	f7ff fbbf 	bl	80033cc <Uint32ConvertHex>
		sprintf(TxFreeListInfo,"%s        %d          %d        %s\n\r",StartTemp,heapSTRUCT_SIZE,pxScanNextFreeBlock->xBlockSize,EndTemp);
 8003c4e:	2308      	movs	r3, #8
 8003c50:	461c      	mov	r4, r3
 8003c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f107 0114 	add.w	r1, r7, #20
 8003c5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c5e:	1d3a      	adds	r2, r7, #4
 8003c60:	9201      	str	r2, [sp, #4]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4623      	mov	r3, r4
 8003c66:	460a      	mov	r2, r1
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <vPrintFreeList+0xdc>)
 8003c6a:	f000 f85b 	bl	8003d24 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)TxFreeListInfo,sizeof(TxFreeListInfo),0xffff);
 8003c6e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c76:	2244      	movs	r2, #68	; 0x44
 8003c78:	4808      	ldr	r0, [pc, #32]	; (8003c9c <vPrintFreeList+0xd4>)
 8003c7a:	f7fe f952 	bl	8001f22 <HAL_UART_Transmit>
 8003c7e:	e000      	b.n	8003c82 <vPrintFreeList+0xba>
			continue;
 8003c80:	bf00      	nop
	for( ; pxScanNextFreeBlock->pxNextFreeBlock != NULL; pxScanNextFreeBlock = pxScanNextFreeBlock->pxNextFreeBlock){
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1c9      	bne.n	8003c24 <vPrintFreeList+0x5c>
	}

}
 8003c90:	bf00      	nop
 8003c92:	3774      	adds	r7, #116	; 0x74
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}
 8003c98:	08004680 	.word	0x08004680
 8003c9c:	20001688 	.word	0x20001688
 8003ca0:	2000166c 	.word	0x2000166c
 8003ca4:	08004658 	.word	0x08004658

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	; (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000014 	.word	0x20000014

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4e0d      	ldr	r6, [pc, #52]	; (8003cec <__libc_init_array+0x38>)
 8003cb8:	4c0d      	ldr	r4, [pc, #52]	; (8003cf0 <__libc_init_array+0x3c>)
 8003cba:	1ba4      	subs	r4, r4, r6
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	2500      	movs	r5, #0
 8003cc0:	42a5      	cmp	r5, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	4e0b      	ldr	r6, [pc, #44]	; (8003cf4 <__libc_init_array+0x40>)
 8003cc6:	4c0c      	ldr	r4, [pc, #48]	; (8003cf8 <__libc_init_array+0x44>)
 8003cc8:	f000 fc30 	bl	800452c <_init>
 8003ccc:	1ba4      	subs	r4, r4, r6
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	42a5      	cmp	r5, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cdc:	4798      	blx	r3
 8003cde:	3501      	adds	r5, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ce6:	4798      	blx	r3
 8003ce8:	3501      	adds	r5, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	08004718 	.word	0x08004718
 8003cf0:	08004718 	.word	0x08004718
 8003cf4:	08004718 	.word	0x08004718
 8003cf8:	0800471c 	.word	0x0800471c

08003cfc <memcpy>:
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	1e43      	subs	r3, r0, #1
 8003d00:	440a      	add	r2, r1
 8003d02:	4291      	cmp	r1, r2
 8003d04:	d100      	bne.n	8003d08 <memcpy+0xc>
 8003d06:	bd10      	pop	{r4, pc}
 8003d08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d10:	e7f7      	b.n	8003d02 <memcpy+0x6>

08003d12 <memset>:
 8003d12:	4402      	add	r2, r0
 8003d14:	4603      	mov	r3, r0
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d100      	bne.n	8003d1c <memset+0xa>
 8003d1a:	4770      	bx	lr
 8003d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d20:	e7f9      	b.n	8003d16 <memset+0x4>
	...

08003d24 <siprintf>:
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	b500      	push	{lr}
 8003d28:	b09c      	sub	sp, #112	; 0x70
 8003d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d2c:	9002      	str	r0, [sp, #8]
 8003d2e:	9006      	str	r0, [sp, #24]
 8003d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d34:	4809      	ldr	r0, [pc, #36]	; (8003d5c <siprintf+0x38>)
 8003d36:	9107      	str	r1, [sp, #28]
 8003d38:	9104      	str	r1, [sp, #16]
 8003d3a:	4909      	ldr	r1, [pc, #36]	; (8003d60 <siprintf+0x3c>)
 8003d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d40:	9105      	str	r1, [sp, #20]
 8003d42:	6800      	ldr	r0, [r0, #0]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	a902      	add	r1, sp, #8
 8003d48:	f000 f86e 	bl	8003e28 <_svfiprintf_r>
 8003d4c:	9b02      	ldr	r3, [sp, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	b01c      	add	sp, #112	; 0x70
 8003d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d58:	b003      	add	sp, #12
 8003d5a:	4770      	bx	lr
 8003d5c:	20000014 	.word	0x20000014
 8003d60:	ffff0208 	.word	0xffff0208

08003d64 <strcpy>:
 8003d64:	4603      	mov	r3, r0
 8003d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d6a:	f803 2b01 	strb.w	r2, [r3], #1
 8003d6e:	2a00      	cmp	r2, #0
 8003d70:	d1f9      	bne.n	8003d66 <strcpy+0x2>
 8003d72:	4770      	bx	lr

08003d74 <__ssputs_r>:
 8003d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d78:	688e      	ldr	r6, [r1, #8]
 8003d7a:	429e      	cmp	r6, r3
 8003d7c:	4682      	mov	sl, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	4690      	mov	r8, r2
 8003d82:	4699      	mov	r9, r3
 8003d84:	d837      	bhi.n	8003df6 <__ssputs_r+0x82>
 8003d86:	898a      	ldrh	r2, [r1, #12]
 8003d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d8c:	d031      	beq.n	8003df2 <__ssputs_r+0x7e>
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	6909      	ldr	r1, [r1, #16]
 8003d92:	1a6f      	subs	r7, r5, r1
 8003d94:	6965      	ldr	r5, [r4, #20]
 8003d96:	2302      	movs	r3, #2
 8003d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003da0:	f109 0301 	add.w	r3, r9, #1
 8003da4:	443b      	add	r3, r7
 8003da6:	429d      	cmp	r5, r3
 8003da8:	bf38      	it	cc
 8003daa:	461d      	movcc	r5, r3
 8003dac:	0553      	lsls	r3, r2, #21
 8003dae:	d530      	bpl.n	8003e12 <__ssputs_r+0x9e>
 8003db0:	4629      	mov	r1, r5
 8003db2:	f000 fb21 	bl	80043f8 <_malloc_r>
 8003db6:	4606      	mov	r6, r0
 8003db8:	b950      	cbnz	r0, 8003dd0 <__ssputs_r+0x5c>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	f8ca 3000 	str.w	r3, [sl]
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd0:	463a      	mov	r2, r7
 8003dd2:	6921      	ldr	r1, [r4, #16]
 8003dd4:	f7ff ff92 	bl	8003cfc <memcpy>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	6126      	str	r6, [r4, #16]
 8003de6:	6165      	str	r5, [r4, #20]
 8003de8:	443e      	add	r6, r7
 8003dea:	1bed      	subs	r5, r5, r7
 8003dec:	6026      	str	r6, [r4, #0]
 8003dee:	60a5      	str	r5, [r4, #8]
 8003df0:	464e      	mov	r6, r9
 8003df2:	454e      	cmp	r6, r9
 8003df4:	d900      	bls.n	8003df8 <__ssputs_r+0x84>
 8003df6:	464e      	mov	r6, r9
 8003df8:	4632      	mov	r2, r6
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	f000 fa93 	bl	8004328 <memmove>
 8003e02:	68a3      	ldr	r3, [r4, #8]
 8003e04:	1b9b      	subs	r3, r3, r6
 8003e06:	60a3      	str	r3, [r4, #8]
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	441e      	add	r6, r3
 8003e0c:	6026      	str	r6, [r4, #0]
 8003e0e:	2000      	movs	r0, #0
 8003e10:	e7dc      	b.n	8003dcc <__ssputs_r+0x58>
 8003e12:	462a      	mov	r2, r5
 8003e14:	f000 fb4a 	bl	80044ac <_realloc_r>
 8003e18:	4606      	mov	r6, r0
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d1e2      	bne.n	8003de4 <__ssputs_r+0x70>
 8003e1e:	6921      	ldr	r1, [r4, #16]
 8003e20:	4650      	mov	r0, sl
 8003e22:	f000 fa9b 	bl	800435c <_free_r>
 8003e26:	e7c8      	b.n	8003dba <__ssputs_r+0x46>

08003e28 <_svfiprintf_r>:
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	461d      	mov	r5, r3
 8003e2e:	898b      	ldrh	r3, [r1, #12]
 8003e30:	061f      	lsls	r7, r3, #24
 8003e32:	b09d      	sub	sp, #116	; 0x74
 8003e34:	4680      	mov	r8, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	4616      	mov	r6, r2
 8003e3a:	d50f      	bpl.n	8003e5c <_svfiprintf_r+0x34>
 8003e3c:	690b      	ldr	r3, [r1, #16]
 8003e3e:	b96b      	cbnz	r3, 8003e5c <_svfiprintf_r+0x34>
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	f000 fad9 	bl	80043f8 <_malloc_r>
 8003e46:	6020      	str	r0, [r4, #0]
 8003e48:	6120      	str	r0, [r4, #16]
 8003e4a:	b928      	cbnz	r0, 8003e58 <_svfiprintf_r+0x30>
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	f8c8 3000 	str.w	r3, [r8]
 8003e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e56:	e0c8      	b.n	8003fea <_svfiprintf_r+0x1c2>
 8003e58:	2340      	movs	r3, #64	; 0x40
 8003e5a:	6163      	str	r3, [r4, #20]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e60:	2320      	movs	r3, #32
 8003e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e66:	2330      	movs	r3, #48	; 0x30
 8003e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e6c:	9503      	str	r5, [sp, #12]
 8003e6e:	f04f 0b01 	mov.w	fp, #1
 8003e72:	4637      	mov	r7, r6
 8003e74:	463d      	mov	r5, r7
 8003e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e7a:	b10b      	cbz	r3, 8003e80 <_svfiprintf_r+0x58>
 8003e7c:	2b25      	cmp	r3, #37	; 0x25
 8003e7e:	d13e      	bne.n	8003efe <_svfiprintf_r+0xd6>
 8003e80:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e84:	d00b      	beq.n	8003e9e <_svfiprintf_r+0x76>
 8003e86:	4653      	mov	r3, sl
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	f7ff ff71 	bl	8003d74 <__ssputs_r>
 8003e92:	3001      	adds	r0, #1
 8003e94:	f000 80a4 	beq.w	8003fe0 <_svfiprintf_r+0x1b8>
 8003e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9a:	4453      	add	r3, sl
 8003e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9e:	783b      	ldrb	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 809d 	beq.w	8003fe0 <_svfiprintf_r+0x1b8>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eb0:	9304      	str	r3, [sp, #16]
 8003eb2:	9307      	str	r3, [sp, #28]
 8003eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8003eba:	462f      	mov	r7, r5
 8003ebc:	2205      	movs	r2, #5
 8003ebe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003ec2:	4850      	ldr	r0, [pc, #320]	; (8004004 <_svfiprintf_r+0x1dc>)
 8003ec4:	f7fc f98c 	bl	80001e0 <memchr>
 8003ec8:	9b04      	ldr	r3, [sp, #16]
 8003eca:	b9d0      	cbnz	r0, 8003f02 <_svfiprintf_r+0xda>
 8003ecc:	06d9      	lsls	r1, r3, #27
 8003ece:	bf44      	itt	mi
 8003ed0:	2220      	movmi	r2, #32
 8003ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ed6:	071a      	lsls	r2, r3, #28
 8003ed8:	bf44      	itt	mi
 8003eda:	222b      	movmi	r2, #43	; 0x2b
 8003edc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ee0:	782a      	ldrb	r2, [r5, #0]
 8003ee2:	2a2a      	cmp	r2, #42	; 0x2a
 8003ee4:	d015      	beq.n	8003f12 <_svfiprintf_r+0xea>
 8003ee6:	9a07      	ldr	r2, [sp, #28]
 8003ee8:	462f      	mov	r7, r5
 8003eea:	2000      	movs	r0, #0
 8003eec:	250a      	movs	r5, #10
 8003eee:	4639      	mov	r1, r7
 8003ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ef4:	3b30      	subs	r3, #48	; 0x30
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	d94d      	bls.n	8003f96 <_svfiprintf_r+0x16e>
 8003efa:	b1b8      	cbz	r0, 8003f2c <_svfiprintf_r+0x104>
 8003efc:	e00f      	b.n	8003f1e <_svfiprintf_r+0xf6>
 8003efe:	462f      	mov	r7, r5
 8003f00:	e7b8      	b.n	8003e74 <_svfiprintf_r+0x4c>
 8003f02:	4a40      	ldr	r2, [pc, #256]	; (8004004 <_svfiprintf_r+0x1dc>)
 8003f04:	1a80      	subs	r0, r0, r2
 8003f06:	fa0b f000 	lsl.w	r0, fp, r0
 8003f0a:	4318      	orrs	r0, r3
 8003f0c:	9004      	str	r0, [sp, #16]
 8003f0e:	463d      	mov	r5, r7
 8003f10:	e7d3      	b.n	8003eba <_svfiprintf_r+0x92>
 8003f12:	9a03      	ldr	r2, [sp, #12]
 8003f14:	1d11      	adds	r1, r2, #4
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	9103      	str	r1, [sp, #12]
 8003f1a:	2a00      	cmp	r2, #0
 8003f1c:	db01      	blt.n	8003f22 <_svfiprintf_r+0xfa>
 8003f1e:	9207      	str	r2, [sp, #28]
 8003f20:	e004      	b.n	8003f2c <_svfiprintf_r+0x104>
 8003f22:	4252      	negs	r2, r2
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	9207      	str	r2, [sp, #28]
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	783b      	ldrb	r3, [r7, #0]
 8003f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f30:	d10c      	bne.n	8003f4c <_svfiprintf_r+0x124>
 8003f32:	787b      	ldrb	r3, [r7, #1]
 8003f34:	2b2a      	cmp	r3, #42	; 0x2a
 8003f36:	d133      	bne.n	8003fa0 <_svfiprintf_r+0x178>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	9203      	str	r2, [sp, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bfb8      	it	lt
 8003f44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f48:	3702      	adds	r7, #2
 8003f4a:	9305      	str	r3, [sp, #20]
 8003f4c:	4d2e      	ldr	r5, [pc, #184]	; (8004008 <_svfiprintf_r+0x1e0>)
 8003f4e:	7839      	ldrb	r1, [r7, #0]
 8003f50:	2203      	movs	r2, #3
 8003f52:	4628      	mov	r0, r5
 8003f54:	f7fc f944 	bl	80001e0 <memchr>
 8003f58:	b138      	cbz	r0, 8003f6a <_svfiprintf_r+0x142>
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	1b40      	subs	r0, r0, r5
 8003f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f62:	9b04      	ldr	r3, [sp, #16]
 8003f64:	4303      	orrs	r3, r0
 8003f66:	3701      	adds	r7, #1
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	7839      	ldrb	r1, [r7, #0]
 8003f6c:	4827      	ldr	r0, [pc, #156]	; (800400c <_svfiprintf_r+0x1e4>)
 8003f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f72:	2206      	movs	r2, #6
 8003f74:	1c7e      	adds	r6, r7, #1
 8003f76:	f7fc f933 	bl	80001e0 <memchr>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d038      	beq.n	8003ff0 <_svfiprintf_r+0x1c8>
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <_svfiprintf_r+0x1e8>)
 8003f80:	bb13      	cbnz	r3, 8003fc8 <_svfiprintf_r+0x1a0>
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	3307      	adds	r3, #7
 8003f86:	f023 0307 	bic.w	r3, r3, #7
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	9303      	str	r3, [sp, #12]
 8003f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f90:	444b      	add	r3, r9
 8003f92:	9309      	str	r3, [sp, #36]	; 0x24
 8003f94:	e76d      	b.n	8003e72 <_svfiprintf_r+0x4a>
 8003f96:	fb05 3202 	mla	r2, r5, r2, r3
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	460f      	mov	r7, r1
 8003f9e:	e7a6      	b.n	8003eee <_svfiprintf_r+0xc6>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	3701      	adds	r7, #1
 8003fa4:	9305      	str	r3, [sp, #20]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	250a      	movs	r5, #10
 8003faa:	4638      	mov	r0, r7
 8003fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fb0:	3a30      	subs	r2, #48	; 0x30
 8003fb2:	2a09      	cmp	r2, #9
 8003fb4:	d903      	bls.n	8003fbe <_svfiprintf_r+0x196>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0c8      	beq.n	8003f4c <_svfiprintf_r+0x124>
 8003fba:	9105      	str	r1, [sp, #20]
 8003fbc:	e7c6      	b.n	8003f4c <_svfiprintf_r+0x124>
 8003fbe:	fb05 2101 	mla	r1, r5, r1, r2
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	e7f0      	b.n	8003faa <_svfiprintf_r+0x182>
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4622      	mov	r2, r4
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <_svfiprintf_r+0x1ec>)
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003fdc:	4681      	mov	r9, r0
 8003fde:	d1d6      	bne.n	8003f8e <_svfiprintf_r+0x166>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	065b      	lsls	r3, r3, #25
 8003fe4:	f53f af35 	bmi.w	8003e52 <_svfiprintf_r+0x2a>
 8003fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fea:	b01d      	add	sp, #116	; 0x74
 8003fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff0:	ab03      	add	r3, sp, #12
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <_svfiprintf_r+0x1ec>)
 8003ff8:	a904      	add	r1, sp, #16
 8003ffa:	4640      	mov	r0, r8
 8003ffc:	f000 f882 	bl	8004104 <_printf_i>
 8004000:	e7ea      	b.n	8003fd8 <_svfiprintf_r+0x1b0>
 8004002:	bf00      	nop
 8004004:	080046dc 	.word	0x080046dc
 8004008:	080046e2 	.word	0x080046e2
 800400c:	080046e6 	.word	0x080046e6
 8004010:	00000000 	.word	0x00000000
 8004014:	08003d75 	.word	0x08003d75

08004018 <_printf_common>:
 8004018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	4691      	mov	r9, r2
 800401e:	461f      	mov	r7, r3
 8004020:	688a      	ldr	r2, [r1, #8]
 8004022:	690b      	ldr	r3, [r1, #16]
 8004024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004028:	4293      	cmp	r3, r2
 800402a:	bfb8      	it	lt
 800402c:	4613      	movlt	r3, r2
 800402e:	f8c9 3000 	str.w	r3, [r9]
 8004032:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004036:	4606      	mov	r6, r0
 8004038:	460c      	mov	r4, r1
 800403a:	b112      	cbz	r2, 8004042 <_printf_common+0x2a>
 800403c:	3301      	adds	r3, #1
 800403e:	f8c9 3000 	str.w	r3, [r9]
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	0699      	lsls	r1, r3, #26
 8004046:	bf42      	ittt	mi
 8004048:	f8d9 3000 	ldrmi.w	r3, [r9]
 800404c:	3302      	addmi	r3, #2
 800404e:	f8c9 3000 	strmi.w	r3, [r9]
 8004052:	6825      	ldr	r5, [r4, #0]
 8004054:	f015 0506 	ands.w	r5, r5, #6
 8004058:	d107      	bne.n	800406a <_printf_common+0x52>
 800405a:	f104 0a19 	add.w	sl, r4, #25
 800405e:	68e3      	ldr	r3, [r4, #12]
 8004060:	f8d9 2000 	ldr.w	r2, [r9]
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	42ab      	cmp	r3, r5
 8004068:	dc28      	bgt.n	80040bc <_printf_common+0xa4>
 800406a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	3300      	adds	r3, #0
 8004072:	bf18      	it	ne
 8004074:	2301      	movne	r3, #1
 8004076:	0692      	lsls	r2, r2, #26
 8004078:	d42d      	bmi.n	80040d6 <_printf_common+0xbe>
 800407a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800407e:	4639      	mov	r1, r7
 8004080:	4630      	mov	r0, r6
 8004082:	47c0      	blx	r8
 8004084:	3001      	adds	r0, #1
 8004086:	d020      	beq.n	80040ca <_printf_common+0xb2>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	68e5      	ldr	r5, [r4, #12]
 800408c:	f8d9 2000 	ldr.w	r2, [r9]
 8004090:	f003 0306 	and.w	r3, r3, #6
 8004094:	2b04      	cmp	r3, #4
 8004096:	bf08      	it	eq
 8004098:	1aad      	subeq	r5, r5, r2
 800409a:	68a3      	ldr	r3, [r4, #8]
 800409c:	6922      	ldr	r2, [r4, #16]
 800409e:	bf0c      	ite	eq
 80040a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040a4:	2500      	movne	r5, #0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	bfc4      	itt	gt
 80040aa:	1a9b      	subgt	r3, r3, r2
 80040ac:	18ed      	addgt	r5, r5, r3
 80040ae:	f04f 0900 	mov.w	r9, #0
 80040b2:	341a      	adds	r4, #26
 80040b4:	454d      	cmp	r5, r9
 80040b6:	d11a      	bne.n	80040ee <_printf_common+0xd6>
 80040b8:	2000      	movs	r0, #0
 80040ba:	e008      	b.n	80040ce <_printf_common+0xb6>
 80040bc:	2301      	movs	r3, #1
 80040be:	4652      	mov	r2, sl
 80040c0:	4639      	mov	r1, r7
 80040c2:	4630      	mov	r0, r6
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d103      	bne.n	80040d2 <_printf_common+0xba>
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d2:	3501      	adds	r5, #1
 80040d4:	e7c3      	b.n	800405e <_printf_common+0x46>
 80040d6:	18e1      	adds	r1, r4, r3
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	2030      	movs	r0, #48	; 0x30
 80040dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040e0:	4422      	add	r2, r4
 80040e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ea:	3302      	adds	r3, #2
 80040ec:	e7c5      	b.n	800407a <_printf_common+0x62>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4622      	mov	r2, r4
 80040f2:	4639      	mov	r1, r7
 80040f4:	4630      	mov	r0, r6
 80040f6:	47c0      	blx	r8
 80040f8:	3001      	adds	r0, #1
 80040fa:	d0e6      	beq.n	80040ca <_printf_common+0xb2>
 80040fc:	f109 0901 	add.w	r9, r9, #1
 8004100:	e7d8      	b.n	80040b4 <_printf_common+0x9c>
	...

08004104 <_printf_i>:
 8004104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004108:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800410c:	460c      	mov	r4, r1
 800410e:	7e09      	ldrb	r1, [r1, #24]
 8004110:	b085      	sub	sp, #20
 8004112:	296e      	cmp	r1, #110	; 0x6e
 8004114:	4617      	mov	r7, r2
 8004116:	4606      	mov	r6, r0
 8004118:	4698      	mov	r8, r3
 800411a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800411c:	f000 80b3 	beq.w	8004286 <_printf_i+0x182>
 8004120:	d822      	bhi.n	8004168 <_printf_i+0x64>
 8004122:	2963      	cmp	r1, #99	; 0x63
 8004124:	d036      	beq.n	8004194 <_printf_i+0x90>
 8004126:	d80a      	bhi.n	800413e <_printf_i+0x3a>
 8004128:	2900      	cmp	r1, #0
 800412a:	f000 80b9 	beq.w	80042a0 <_printf_i+0x19c>
 800412e:	2958      	cmp	r1, #88	; 0x58
 8004130:	f000 8083 	beq.w	800423a <_printf_i+0x136>
 8004134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004138:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800413c:	e032      	b.n	80041a4 <_printf_i+0xa0>
 800413e:	2964      	cmp	r1, #100	; 0x64
 8004140:	d001      	beq.n	8004146 <_printf_i+0x42>
 8004142:	2969      	cmp	r1, #105	; 0x69
 8004144:	d1f6      	bne.n	8004134 <_printf_i+0x30>
 8004146:	6820      	ldr	r0, [r4, #0]
 8004148:	6813      	ldr	r3, [r2, #0]
 800414a:	0605      	lsls	r5, r0, #24
 800414c:	f103 0104 	add.w	r1, r3, #4
 8004150:	d52a      	bpl.n	80041a8 <_printf_i+0xa4>
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	da03      	bge.n	8004162 <_printf_i+0x5e>
 800415a:	222d      	movs	r2, #45	; 0x2d
 800415c:	425b      	negs	r3, r3
 800415e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004162:	486f      	ldr	r0, [pc, #444]	; (8004320 <_printf_i+0x21c>)
 8004164:	220a      	movs	r2, #10
 8004166:	e039      	b.n	80041dc <_printf_i+0xd8>
 8004168:	2973      	cmp	r1, #115	; 0x73
 800416a:	f000 809d 	beq.w	80042a8 <_printf_i+0x1a4>
 800416e:	d808      	bhi.n	8004182 <_printf_i+0x7e>
 8004170:	296f      	cmp	r1, #111	; 0x6f
 8004172:	d020      	beq.n	80041b6 <_printf_i+0xb2>
 8004174:	2970      	cmp	r1, #112	; 0x70
 8004176:	d1dd      	bne.n	8004134 <_printf_i+0x30>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	f043 0320 	orr.w	r3, r3, #32
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	e003      	b.n	800418a <_printf_i+0x86>
 8004182:	2975      	cmp	r1, #117	; 0x75
 8004184:	d017      	beq.n	80041b6 <_printf_i+0xb2>
 8004186:	2978      	cmp	r1, #120	; 0x78
 8004188:	d1d4      	bne.n	8004134 <_printf_i+0x30>
 800418a:	2378      	movs	r3, #120	; 0x78
 800418c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004190:	4864      	ldr	r0, [pc, #400]	; (8004324 <_printf_i+0x220>)
 8004192:	e055      	b.n	8004240 <_printf_i+0x13c>
 8004194:	6813      	ldr	r3, [r2, #0]
 8004196:	1d19      	adds	r1, r3, #4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6011      	str	r1, [r2, #0]
 800419c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a4:	2301      	movs	r3, #1
 80041a6:	e08c      	b.n	80042c2 <_printf_i+0x1be>
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6011      	str	r1, [r2, #0]
 80041ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041b0:	bf18      	it	ne
 80041b2:	b21b      	sxthne	r3, r3
 80041b4:	e7cf      	b.n	8004156 <_printf_i+0x52>
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	6825      	ldr	r5, [r4, #0]
 80041ba:	1d18      	adds	r0, r3, #4
 80041bc:	6010      	str	r0, [r2, #0]
 80041be:	0628      	lsls	r0, r5, #24
 80041c0:	d501      	bpl.n	80041c6 <_printf_i+0xc2>
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	e002      	b.n	80041cc <_printf_i+0xc8>
 80041c6:	0668      	lsls	r0, r5, #25
 80041c8:	d5fb      	bpl.n	80041c2 <_printf_i+0xbe>
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	4854      	ldr	r0, [pc, #336]	; (8004320 <_printf_i+0x21c>)
 80041ce:	296f      	cmp	r1, #111	; 0x6f
 80041d0:	bf14      	ite	ne
 80041d2:	220a      	movne	r2, #10
 80041d4:	2208      	moveq	r2, #8
 80041d6:	2100      	movs	r1, #0
 80041d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041dc:	6865      	ldr	r5, [r4, #4]
 80041de:	60a5      	str	r5, [r4, #8]
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	f2c0 8095 	blt.w	8004310 <_printf_i+0x20c>
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	f021 0104 	bic.w	r1, r1, #4
 80041ec:	6021      	str	r1, [r4, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d13d      	bne.n	800426e <_printf_i+0x16a>
 80041f2:	2d00      	cmp	r5, #0
 80041f4:	f040 808e 	bne.w	8004314 <_printf_i+0x210>
 80041f8:	4665      	mov	r5, ip
 80041fa:	2a08      	cmp	r2, #8
 80041fc:	d10b      	bne.n	8004216 <_printf_i+0x112>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	07db      	lsls	r3, r3, #31
 8004202:	d508      	bpl.n	8004216 <_printf_i+0x112>
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	bfde      	ittt	le
 800420c:	2330      	movle	r3, #48	; 0x30
 800420e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004212:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004216:	ebac 0305 	sub.w	r3, ip, r5
 800421a:	6123      	str	r3, [r4, #16]
 800421c:	f8cd 8000 	str.w	r8, [sp]
 8004220:	463b      	mov	r3, r7
 8004222:	aa03      	add	r2, sp, #12
 8004224:	4621      	mov	r1, r4
 8004226:	4630      	mov	r0, r6
 8004228:	f7ff fef6 	bl	8004018 <_printf_common>
 800422c:	3001      	adds	r0, #1
 800422e:	d14d      	bne.n	80042cc <_printf_i+0x1c8>
 8004230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004234:	b005      	add	sp, #20
 8004236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800423a:	4839      	ldr	r0, [pc, #228]	; (8004320 <_printf_i+0x21c>)
 800423c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004240:	6813      	ldr	r3, [r2, #0]
 8004242:	6821      	ldr	r1, [r4, #0]
 8004244:	1d1d      	adds	r5, r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6015      	str	r5, [r2, #0]
 800424a:	060a      	lsls	r2, r1, #24
 800424c:	d50b      	bpl.n	8004266 <_printf_i+0x162>
 800424e:	07ca      	lsls	r2, r1, #31
 8004250:	bf44      	itt	mi
 8004252:	f041 0120 	orrmi.w	r1, r1, #32
 8004256:	6021      	strmi	r1, [r4, #0]
 8004258:	b91b      	cbnz	r3, 8004262 <_printf_i+0x15e>
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	f022 0220 	bic.w	r2, r2, #32
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	2210      	movs	r2, #16
 8004264:	e7b7      	b.n	80041d6 <_printf_i+0xd2>
 8004266:	064d      	lsls	r5, r1, #25
 8004268:	bf48      	it	mi
 800426a:	b29b      	uxthmi	r3, r3
 800426c:	e7ef      	b.n	800424e <_printf_i+0x14a>
 800426e:	4665      	mov	r5, ip
 8004270:	fbb3 f1f2 	udiv	r1, r3, r2
 8004274:	fb02 3311 	mls	r3, r2, r1, r3
 8004278:	5cc3      	ldrb	r3, [r0, r3]
 800427a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800427e:	460b      	mov	r3, r1
 8004280:	2900      	cmp	r1, #0
 8004282:	d1f5      	bne.n	8004270 <_printf_i+0x16c>
 8004284:	e7b9      	b.n	80041fa <_printf_i+0xf6>
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	6825      	ldr	r5, [r4, #0]
 800428a:	6961      	ldr	r1, [r4, #20]
 800428c:	1d18      	adds	r0, r3, #4
 800428e:	6010      	str	r0, [r2, #0]
 8004290:	0628      	lsls	r0, r5, #24
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	d501      	bpl.n	800429a <_printf_i+0x196>
 8004296:	6019      	str	r1, [r3, #0]
 8004298:	e002      	b.n	80042a0 <_printf_i+0x19c>
 800429a:	066a      	lsls	r2, r5, #25
 800429c:	d5fb      	bpl.n	8004296 <_printf_i+0x192>
 800429e:	8019      	strh	r1, [r3, #0]
 80042a0:	2300      	movs	r3, #0
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	4665      	mov	r5, ip
 80042a6:	e7b9      	b.n	800421c <_printf_i+0x118>
 80042a8:	6813      	ldr	r3, [r2, #0]
 80042aa:	1d19      	adds	r1, r3, #4
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	681d      	ldr	r5, [r3, #0]
 80042b0:	6862      	ldr	r2, [r4, #4]
 80042b2:	2100      	movs	r1, #0
 80042b4:	4628      	mov	r0, r5
 80042b6:	f7fb ff93 	bl	80001e0 <memchr>
 80042ba:	b108      	cbz	r0, 80042c0 <_printf_i+0x1bc>
 80042bc:	1b40      	subs	r0, r0, r5
 80042be:	6060      	str	r0, [r4, #4]
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	6123      	str	r3, [r4, #16]
 80042c4:	2300      	movs	r3, #0
 80042c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ca:	e7a7      	b.n	800421c <_printf_i+0x118>
 80042cc:	6923      	ldr	r3, [r4, #16]
 80042ce:	462a      	mov	r2, r5
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d0aa      	beq.n	8004230 <_printf_i+0x12c>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	079b      	lsls	r3, r3, #30
 80042de:	d413      	bmi.n	8004308 <_printf_i+0x204>
 80042e0:	68e0      	ldr	r0, [r4, #12]
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	4298      	cmp	r0, r3
 80042e6:	bfb8      	it	lt
 80042e8:	4618      	movlt	r0, r3
 80042ea:	e7a3      	b.n	8004234 <_printf_i+0x130>
 80042ec:	2301      	movs	r3, #1
 80042ee:	464a      	mov	r2, r9
 80042f0:	4639      	mov	r1, r7
 80042f2:	4630      	mov	r0, r6
 80042f4:	47c0      	blx	r8
 80042f6:	3001      	adds	r0, #1
 80042f8:	d09a      	beq.n	8004230 <_printf_i+0x12c>
 80042fa:	3501      	adds	r5, #1
 80042fc:	68e3      	ldr	r3, [r4, #12]
 80042fe:	9a03      	ldr	r2, [sp, #12]
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	42ab      	cmp	r3, r5
 8004304:	dcf2      	bgt.n	80042ec <_printf_i+0x1e8>
 8004306:	e7eb      	b.n	80042e0 <_printf_i+0x1dc>
 8004308:	2500      	movs	r5, #0
 800430a:	f104 0919 	add.w	r9, r4, #25
 800430e:	e7f5      	b.n	80042fc <_printf_i+0x1f8>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ac      	bne.n	800426e <_printf_i+0x16a>
 8004314:	7803      	ldrb	r3, [r0, #0]
 8004316:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800431a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800431e:	e76c      	b.n	80041fa <_printf_i+0xf6>
 8004320:	080046ed 	.word	0x080046ed
 8004324:	080046fe 	.word	0x080046fe

08004328 <memmove>:
 8004328:	4288      	cmp	r0, r1
 800432a:	b510      	push	{r4, lr}
 800432c:	eb01 0302 	add.w	r3, r1, r2
 8004330:	d807      	bhi.n	8004342 <memmove+0x1a>
 8004332:	1e42      	subs	r2, r0, #1
 8004334:	4299      	cmp	r1, r3
 8004336:	d00a      	beq.n	800434e <memmove+0x26>
 8004338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800433c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004340:	e7f8      	b.n	8004334 <memmove+0xc>
 8004342:	4283      	cmp	r3, r0
 8004344:	d9f5      	bls.n	8004332 <memmove+0xa>
 8004346:	1881      	adds	r1, r0, r2
 8004348:	1ad2      	subs	r2, r2, r3
 800434a:	42d3      	cmn	r3, r2
 800434c:	d100      	bne.n	8004350 <memmove+0x28>
 800434e:	bd10      	pop	{r4, pc}
 8004350:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004354:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004358:	e7f7      	b.n	800434a <memmove+0x22>
	...

0800435c <_free_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4605      	mov	r5, r0
 8004360:	2900      	cmp	r1, #0
 8004362:	d045      	beq.n	80043f0 <_free_r+0x94>
 8004364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004368:	1f0c      	subs	r4, r1, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfb8      	it	lt
 800436e:	18e4      	addlt	r4, r4, r3
 8004370:	f000 f8d2 	bl	8004518 <__malloc_lock>
 8004374:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <_free_r+0x98>)
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	4610      	mov	r0, r2
 800437a:	b933      	cbnz	r3, 800438a <_free_r+0x2e>
 800437c:	6063      	str	r3, [r4, #4]
 800437e:	6014      	str	r4, [r2, #0]
 8004380:	4628      	mov	r0, r5
 8004382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004386:	f000 b8c8 	b.w	800451a <__malloc_unlock>
 800438a:	42a3      	cmp	r3, r4
 800438c:	d90c      	bls.n	80043a8 <_free_r+0x4c>
 800438e:	6821      	ldr	r1, [r4, #0]
 8004390:	1862      	adds	r2, r4, r1
 8004392:	4293      	cmp	r3, r2
 8004394:	bf04      	itt	eq
 8004396:	681a      	ldreq	r2, [r3, #0]
 8004398:	685b      	ldreq	r3, [r3, #4]
 800439a:	6063      	str	r3, [r4, #4]
 800439c:	bf04      	itt	eq
 800439e:	1852      	addeq	r2, r2, r1
 80043a0:	6022      	streq	r2, [r4, #0]
 80043a2:	6004      	str	r4, [r0, #0]
 80043a4:	e7ec      	b.n	8004380 <_free_r+0x24>
 80043a6:	4613      	mov	r3, r2
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	b10a      	cbz	r2, 80043b0 <_free_r+0x54>
 80043ac:	42a2      	cmp	r2, r4
 80043ae:	d9fa      	bls.n	80043a6 <_free_r+0x4a>
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	1858      	adds	r0, r3, r1
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d10b      	bne.n	80043d0 <_free_r+0x74>
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	4401      	add	r1, r0
 80043bc:	1858      	adds	r0, r3, r1
 80043be:	4282      	cmp	r2, r0
 80043c0:	6019      	str	r1, [r3, #0]
 80043c2:	d1dd      	bne.n	8004380 <_free_r+0x24>
 80043c4:	6810      	ldr	r0, [r2, #0]
 80043c6:	6852      	ldr	r2, [r2, #4]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	4401      	add	r1, r0
 80043cc:	6019      	str	r1, [r3, #0]
 80043ce:	e7d7      	b.n	8004380 <_free_r+0x24>
 80043d0:	d902      	bls.n	80043d8 <_free_r+0x7c>
 80043d2:	230c      	movs	r3, #12
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	e7d3      	b.n	8004380 <_free_r+0x24>
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	1821      	adds	r1, r4, r0
 80043dc:	428a      	cmp	r2, r1
 80043de:	bf04      	itt	eq
 80043e0:	6811      	ldreq	r1, [r2, #0]
 80043e2:	6852      	ldreq	r2, [r2, #4]
 80043e4:	6062      	str	r2, [r4, #4]
 80043e6:	bf04      	itt	eq
 80043e8:	1809      	addeq	r1, r1, r0
 80043ea:	6021      	streq	r1, [r4, #0]
 80043ec:	605c      	str	r4, [r3, #4]
 80043ee:	e7c7      	b.n	8004380 <_free_r+0x24>
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
 80043f2:	bf00      	nop
 80043f4:	20001680 	.word	0x20001680

080043f8 <_malloc_r>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	1ccd      	adds	r5, r1, #3
 80043fc:	f025 0503 	bic.w	r5, r5, #3
 8004400:	3508      	adds	r5, #8
 8004402:	2d0c      	cmp	r5, #12
 8004404:	bf38      	it	cc
 8004406:	250c      	movcc	r5, #12
 8004408:	2d00      	cmp	r5, #0
 800440a:	4606      	mov	r6, r0
 800440c:	db01      	blt.n	8004412 <_malloc_r+0x1a>
 800440e:	42a9      	cmp	r1, r5
 8004410:	d903      	bls.n	800441a <_malloc_r+0x22>
 8004412:	230c      	movs	r3, #12
 8004414:	6033      	str	r3, [r6, #0]
 8004416:	2000      	movs	r0, #0
 8004418:	bd70      	pop	{r4, r5, r6, pc}
 800441a:	f000 f87d 	bl	8004518 <__malloc_lock>
 800441e:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <_malloc_r+0xac>)
 8004420:	6814      	ldr	r4, [r2, #0]
 8004422:	4621      	mov	r1, r4
 8004424:	b991      	cbnz	r1, 800444c <_malloc_r+0x54>
 8004426:	4c20      	ldr	r4, [pc, #128]	; (80044a8 <_malloc_r+0xb0>)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	b91b      	cbnz	r3, 8004434 <_malloc_r+0x3c>
 800442c:	4630      	mov	r0, r6
 800442e:	f000 f863 	bl	80044f8 <_sbrk_r>
 8004432:	6020      	str	r0, [r4, #0]
 8004434:	4629      	mov	r1, r5
 8004436:	4630      	mov	r0, r6
 8004438:	f000 f85e 	bl	80044f8 <_sbrk_r>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d124      	bne.n	800448a <_malloc_r+0x92>
 8004440:	230c      	movs	r3, #12
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	4630      	mov	r0, r6
 8004446:	f000 f868 	bl	800451a <__malloc_unlock>
 800444a:	e7e4      	b.n	8004416 <_malloc_r+0x1e>
 800444c:	680b      	ldr	r3, [r1, #0]
 800444e:	1b5b      	subs	r3, r3, r5
 8004450:	d418      	bmi.n	8004484 <_malloc_r+0x8c>
 8004452:	2b0b      	cmp	r3, #11
 8004454:	d90f      	bls.n	8004476 <_malloc_r+0x7e>
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	50cd      	str	r5, [r1, r3]
 800445a:	18cc      	adds	r4, r1, r3
 800445c:	4630      	mov	r0, r6
 800445e:	f000 f85c 	bl	800451a <__malloc_unlock>
 8004462:	f104 000b 	add.w	r0, r4, #11
 8004466:	1d23      	adds	r3, r4, #4
 8004468:	f020 0007 	bic.w	r0, r0, #7
 800446c:	1ac3      	subs	r3, r0, r3
 800446e:	d0d3      	beq.n	8004418 <_malloc_r+0x20>
 8004470:	425a      	negs	r2, r3
 8004472:	50e2      	str	r2, [r4, r3]
 8004474:	e7d0      	b.n	8004418 <_malloc_r+0x20>
 8004476:	428c      	cmp	r4, r1
 8004478:	684b      	ldr	r3, [r1, #4]
 800447a:	bf16      	itet	ne
 800447c:	6063      	strne	r3, [r4, #4]
 800447e:	6013      	streq	r3, [r2, #0]
 8004480:	460c      	movne	r4, r1
 8004482:	e7eb      	b.n	800445c <_malloc_r+0x64>
 8004484:	460c      	mov	r4, r1
 8004486:	6849      	ldr	r1, [r1, #4]
 8004488:	e7cc      	b.n	8004424 <_malloc_r+0x2c>
 800448a:	1cc4      	adds	r4, r0, #3
 800448c:	f024 0403 	bic.w	r4, r4, #3
 8004490:	42a0      	cmp	r0, r4
 8004492:	d005      	beq.n	80044a0 <_malloc_r+0xa8>
 8004494:	1a21      	subs	r1, r4, r0
 8004496:	4630      	mov	r0, r6
 8004498:	f000 f82e 	bl	80044f8 <_sbrk_r>
 800449c:	3001      	adds	r0, #1
 800449e:	d0cf      	beq.n	8004440 <_malloc_r+0x48>
 80044a0:	6025      	str	r5, [r4, #0]
 80044a2:	e7db      	b.n	800445c <_malloc_r+0x64>
 80044a4:	20001680 	.word	0x20001680
 80044a8:	20001684 	.word	0x20001684

080044ac <_realloc_r>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	4607      	mov	r7, r0
 80044b0:	4614      	mov	r4, r2
 80044b2:	460e      	mov	r6, r1
 80044b4:	b921      	cbnz	r1, 80044c0 <_realloc_r+0x14>
 80044b6:	4611      	mov	r1, r2
 80044b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044bc:	f7ff bf9c 	b.w	80043f8 <_malloc_r>
 80044c0:	b922      	cbnz	r2, 80044cc <_realloc_r+0x20>
 80044c2:	f7ff ff4b 	bl	800435c <_free_r>
 80044c6:	4625      	mov	r5, r4
 80044c8:	4628      	mov	r0, r5
 80044ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044cc:	f000 f826 	bl	800451c <_malloc_usable_size_r>
 80044d0:	42a0      	cmp	r0, r4
 80044d2:	d20f      	bcs.n	80044f4 <_realloc_r+0x48>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4638      	mov	r0, r7
 80044d8:	f7ff ff8e 	bl	80043f8 <_malloc_r>
 80044dc:	4605      	mov	r5, r0
 80044de:	2800      	cmp	r0, #0
 80044e0:	d0f2      	beq.n	80044c8 <_realloc_r+0x1c>
 80044e2:	4631      	mov	r1, r6
 80044e4:	4622      	mov	r2, r4
 80044e6:	f7ff fc09 	bl	8003cfc <memcpy>
 80044ea:	4631      	mov	r1, r6
 80044ec:	4638      	mov	r0, r7
 80044ee:	f7ff ff35 	bl	800435c <_free_r>
 80044f2:	e7e9      	b.n	80044c8 <_realloc_r+0x1c>
 80044f4:	4635      	mov	r5, r6
 80044f6:	e7e7      	b.n	80044c8 <_realloc_r+0x1c>

080044f8 <_sbrk_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4c06      	ldr	r4, [pc, #24]	; (8004514 <_sbrk_r+0x1c>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4605      	mov	r5, r0
 8004500:	4608      	mov	r0, r1
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	f7fc faac 	bl	8000a60 <_sbrk>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_sbrk_r+0x1a>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	b103      	cbz	r3, 8004512 <_sbrk_r+0x1a>
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	2000170c 	.word	0x2000170c

08004518 <__malloc_lock>:
 8004518:	4770      	bx	lr

0800451a <__malloc_unlock>:
 800451a:	4770      	bx	lr

0800451c <_malloc_usable_size_r>:
 800451c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004520:	1f18      	subs	r0, r3, #4
 8004522:	2b00      	cmp	r3, #0
 8004524:	bfbc      	itt	lt
 8004526:	580b      	ldrlt	r3, [r1, r0]
 8004528:	18c0      	addlt	r0, r0, r3
 800452a:	4770      	bx	lr

0800452c <_init>:
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	bf00      	nop
 8004530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004532:	bc08      	pop	{r3}
 8004534:	469e      	mov	lr, r3
 8004536:	4770      	bx	lr

08004538 <_fini>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr
